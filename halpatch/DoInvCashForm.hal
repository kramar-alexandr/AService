external function string 255 GetOffSerNrIVJournalID(LongInt,string,string);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
external procedure Val2ToText(string,val,Integer,string,string,var string);
external procedure IntToText(string,Integer,var string);
external procedure PrintCountryCode(string,string);
external procedure FindTaxAdminServiceChain_IVCash(record IVCashVc,string,var Area);
external function string 255 OriginalChainDigitalSeal_IVCash(record EInvoiceBlock,record IVCashVc,val,row LegalInvNrBlock,var Area);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function string 255 MakeCroatianControlCode(date,time,string,string,string,val);
external function string 255 SAFTHashControl(string);
external procedure PrintLoyaltyCard(record LangNrVc,string,string,val,val,LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function roundmode GetVATRoundModeRB();
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure OutAddress(string,string,string,string,string,string,string);
external function Boolean FindFormcode(Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetVATdouble(string,var val,var val,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);
external procedure GetPayDealText(string,string,var string);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetCreditCardType(string,var string);
external procedure GetObjectText(string,var string);
external procedure GetLocationName(string,var string);
external procedure GetLocationContact(string,var string);
external procedure GetLocationPhone(string,var string);
external procedure GetLocationFax(string,var string);
external procedure GetLocationEmail(string,var string);
external procedure GetLocationAddress(string,Integer,var string);
external procedure ItemBC39(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure SelectUnitText(string,string,var string);
external procedure GetOriginCoutry(string,string,var string);
external procedure Mul2VAT(string,val,var val,var val,Integer);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function Boolean GetVATincl(string,var val,var Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean GetPM(string,var string,var string);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);

procedure PrintTaxMatrix_IVCashVc(record IVCashVc IVCashr,record DocVc Docr,record LangNrVc LangNrr,record SysFormatBlock SFb)
begin
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  Integer i,rwcnt;
  row VATCodeBlock VATCbrw;
  record VATCodeBlock VATCodeb;
  val t;
  Integer valtyp;
  string 255 tstr;

  BlockLoad(VATCodeb);
  UnpackFieldMatrix(IVCashr,"TaxMatrix",TMr);
  rwcnt = MatRowCnt(TMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TMr,i,TMrw);
    GetVATRowFromBlock(TMrw.VATCode,VATCodeb,VATCbrw);
    OUTFORMFIELD("F_MOMSKODTOTAL",TMrw.VATCode);    
    OUTFORMFIELD("F_VATCOMMENT",VATCbrw.Comment);

//    GetVATproc(TMrw.VATCode,0,t);
    PrintValueInclZero("F_VATEXCLPRC",TMrw.VATRate,M4Val,LangNrr,SFb,false);    
    if (FIELDINFORM("F_VATBASE")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATBASE,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATBASE",TMrw.BaseSum,valtyp,LangNrr,SFb,false);
    end;    
    if (FIELDINFORM("F_VATVAL")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATVAL,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATVAL",TMrw.VATSum,valtyp,LangNrr,SFb,false);
    end;
  end;
  return;
end;

procedure CashInvVat(Integer stp,Integer incvat,Integer NoTAXonVAT,Integer exportflag,string vatcode,val rowsump,
                var val vatprcp,var val vatvalp,var val vatexclprc,var val vatinclprc,var val rowtax)
BEGIN
  Integer rn;
  val tax1;
  
  vatprcp = blankval;
  vatvalp = blankval;
  vatexclprc = blankval;
  vatinclprc = blankval;
  if (stp==1) then begin
    switch (incvat) begin
      case 0:
        if ((exportflag==0) or (exportflag==3) or (exportflag==4)) then begin
//          Mul2VAT(vatcode,rowsump,vatvalp,vatprcp,incvat);
          GetVATdouble(vatcode,vatprcp,tax1,incvat);
          MulVATIV(vatcode,rowsump,vatvalp,rowtax,incvat,NoTAXonVAT);
          if (GetVAT2(vatcode,vatexclprc,rn,0)) then begin
          end;
          if (GetVATincl(vatcode,vatinclprc,rn)) then begin
          end;
        end;
      otherwise 
//        Mul2VAT(vatcode,rowsump,vatvalp,vatprcp,incvat);
        GetVATdouble(vatcode,vatprcp,tax1,incvat);
        MulVATIV(vatcode,rowsump,vatvalp,rowtax,incvat,NoTAXonVAT);
        if (GetVAT2(vatcode,vatexclprc,rn,0)) then begin
        end;
        if (GetVATincl(vatcode,vatinclprc,rn)) then begin
        end;
    end;
  end;
  RETURN;
END;

procedure PrintLastPageFields(record DocVc Docr,record LangNrVc LangNrr,record IVCashVc IVCashr,record SMVc VATr,Integer vatcnt,
                              record RoundBlock RoundRec,record SysFormatBlock SFb)
BEGIN
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATCoderw;
  row SMVc VATrw;
  Integer i,rwcnt,valtyp;  
  val t,t1,v,vatv,totvatbase;
  string 255 tstr;

  BlockLoad(VATCodeRec);  
//  if (glDoc2p->DocLastPage) then begin
  if (UseTaxTemplatesforTaxCalc==false) then begin
    rwcnt = MatRowCnt(VATCodeRec);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VATCodeRec,i,VATCoderw);
      MatRowGet(VATr,i,VATrw);
      totvatbase = totvatbase + VATrw.DebVal;
      if (VATrw.DebVal!=0) then begin
        tstr = VATCoderw.ExVatpr;
        if (blank(tstr)) then begin
          tstr = USetStr(1244);
        end;
        OUTFORMFIELD("F_VATPRC",tstr);
        switch (RoundRec.VATCalcWay) begin
          case 0:
            MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,IVCashr.InclVAT,IVCashr.NoTAXonVAT);
          case 1:
            vatv = VATrw.CredVal2;
            t1 = VATrw.CurCredVal;
        end;
        vatv = Round(vatv,GetVATRoundMode(RoundRec));
        OUTFORMFIELD("F_VATVAL",vatv);
        if (IVCashr.InclVAT>0) then begin
          t = VATrw.DebVal - vatv;
        end else begin
          t = VATrw.DebVal;
        end;
        OUTFORMFIELD("F_VATBASE",t);
        if (IVCashr.InclVAT>0) then begin
          t = VATrw.DebVal;
        end else begin
          t = VATrw.DebVal + vatv;
        end;
        OUTFORMFIELD("F_VATTOT",t);
        if (IVCashr.InclVAT>0) then begin
          totvatbase = totvatbase - vatv;
        end;
      end;
    end;
  end else begin
    PrintTaxMatrix_IVCashVc(IVCashr,Docr,LangNrr,SFb);
  end;
  
  totvatbase = Round(totvatbase,GetTotalRoundMode(RoundRec));
  if (FIELDINFORM("F_TOTVATBASE")) then begin
    valtyp = M4Val;
    GetFieldArgument(Docr,F_TOTVATBASE,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_TOTVATBASE",totvatbase,valtyp,LangNrr,SFb,false);
  end;
  RETURN;
END;

procedure PrintCashInvRows(record RcVc RepSpec,record IVCashVc IVCashr,record SMVc VATr,Integer vatcnt,record LangNrVc LangNrr,
                           record DocVc Docr,record RoundBlock RoundRec,var val PointsSpent)
BEGIN
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  string 255 tstr;
  record INVc INr;
  record SysFormatBlock SFb;
  record MainStockBlock MSb;
  val t,v;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  record BatchTextVc BTr;
  Integer printedrownr;
  record TaxMatrixVc TMr;
  
  BlockLoad(SFb);
  BlockLoad(MSb);
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeMultiBuyDiscount:
        OUTFORMFIELD("F_ARTNR",IVCashrw.ArtCode);
        OUTFORMFIELD("F_SPECIFIKATION",IVCashrw.Spec);
        PrintValueInclZero("F_ANTAL",IVCashrw.Quant,M4UVal,LangNrr,SFb,false);
        if (FIELDINFORM("F_APRIS")) then begin
          GetFieldArgument(Docr,F_APRIS,tstr);
          if (nonblank(tstr)) then begin
            t = Round(IVCashrw.Price,SetRoundModeD(StringToInt(tstr)));
            PrintValueInclZero("F_APRIS",t,M423Val,LangNrr,SFb,false);
          end else begin
            if (RoundRec.Discount==0) then begin
              t = Round(IVCashrw.Price,SetRoundModeD(3));
            end else begin
              t = Round(IVCashrw.Price,DefaultRoundMode);
            end;
            PrintValueInclZero("F_APRIS",t,M423Val,LangNrr,SFb,false);
          end;  
        end;      
        PrintValueInclZero("F_BELOPP",IVCashrw.Sum,M4Val,LangNrr,SFb,false);
        PrintValue("F_RABATT",IVCashrw.vRebate,M4Val,LangNrr,SFb,false);
        EndFormRow;
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;      
        INr.Code = IVCashrw.ArtCode;
        if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin
        end;
        if (nonblank(IVCashrw.ArtCode)) then begin
          printedrownr = printedrownr + 1;
          OUTFORMFIELD("F_ROWNR",printedrownr);
          IntToText(IVCashr.LangCode,printedrownr,tstr);
          OUTFORMFIELD("F_ROWNRINTEXT",tstr);
        end;
        OUTFORMFIELD("F_TRANSROW",i+1);      
        OUTFORMFIELD("F_CUSTARTNR",IVCashrw.CustArtCode);
        OUTFORMFIELD("F_ARTNR",IVCashrw.ArtCode);
        if (FIELDINFORM("F_ARTNRBC39")) then begin
          ItemBC39(IVCashrw.ArtCode,tstr);
          OUTFORMFIELD("F_ARTNRBC39",tstr);
        end;  
        if (FIELDINFORM("F_ARTNRBCEAN")) then begin
          ItemBCEAN(IVCashrw.ArtCode,tstr);
          OUTFORMFIELD("F_ARTNRBCEAN",tstr);
        end;  
        if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
          ItemBCEAN13(IVCashrw.ArtCode,tstr);      
          OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
        end;  
        if (IVCashrw.ovst!=0) then begin 
          OUTFORMFIELD("F_SPECIFIKATION",USetStr(33690) & " " & IVCashrw.Spec);
        end else begin
          OUTFORMFIELD("F_SPECIFIKATION",IVCashrw.Spec);
        end;
        PrintValueInclZero("F_ANTAL",IVCashrw.Quant,M4UVal,LangNrr,SFb,false);
        if (MSb.UnitConvCalc==0) then begin
          PrintValueInclZero("F_ANTAL2",IVCashrw.Quant*IVCashrw.Coefficient,M4UVal,LangNrr,SFb,false);
        end else begin
          PrintValueInclZero("F_ANTAL2",IVCashrw.Quant/IVCashrw.Coefficient,M4UVal,LangNrr,SFb,false);
        end;
        if (FIELDINFORM("F_APRIS")) then begin
          GetFieldArgument(Docr,F_APRIS,tstr);
          if (nonblank(tstr)) then begin
            t = Round(IVCashrw.Price,SetRoundModeD(StringToInt(tstr)));
            PrintValueInclZero("F_APRIS",t,M423Val,LangNrr,SFb,false);
          end else begin
            if (RoundRec.Discount==0) then begin
              t = Round(IVCashrw.Price,SetRoundModeD(3));
            end else begin
              t = Round(IVCashrw.Price,DefaultRoundMode);
            end;
            PrintValueInclZero("F_APRIS",t,M423Val,LangNrr,SFb,false);
          end;  
        end;
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        if (FIELDINFORM("F_APRISEXCLVAT")) then begin
          FindSalesExVat(TMr,IVCashrw.VATCode,IVCashrw.Price,IVCashr.InclVAT,IVCashr.NoTAXonVAT,t);
          GetFieldArgument(Docr,F_APRISEXCLVAT,tstr);
          if (nonblank(tstr)) then begin
            t = Round(t,SetRoundModeD(StringToInt(tstr)));
            PrintValueInclZero("F_APRISEXCLVAT",t,M423Val,LangNrr,SFb,false);
          end else begin
            if (RoundRec.Discount==0) then begin
              t = Round(t,SetRoundModeD(3));
            end else begin
              t = Round(t,DefaultRoundMode);
            end;
            PrintValueInclZero("F_APRISEXCLVAT",t,M423Val,LangNrr,SFb,false);
          end;  
        end;
        PrintValueInclZero("F_BELOPP",IVCashrw.Sum,M4Val,LangNrr,SFb,false);
        OUTFORMFIELD("F_MOMSKOD",IVCashrw.VATCode);
        PrintValue("F_RABATT",IVCashrw.vRebate,M4Val,LangNrr,SFb,false);
        
        OUTFORMFIELD("MYF_RABATTABS",Round((IVCashrw.Quant * IVCashrw.Price) - IVCashrw.Sum,SetRoundModeD(2)));// Edit ************************** Thursday, 30 April 2015 17:27:11
        
        
        
        OUTFORMFIELD("F_SERIENR",IVCashrw.SerialNr);
        if (FIELDINFORM("F_ENHET")) then begin
          SelectUnitText(IVCashr.LangCode,INr.Unittext,tstr);
          OUTFORMFIELD("F_ENHET",tstr);
        end;  
        OUTFORMFIELD("F_BASPRIS",INr.UPrice1);
        tstr = ValToString(IVCashrw.FIFO*IVCashrw.Quant,M45Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
        OUTFORMFIELD("F_SUMFIFO",tstr);
        if (IVCashrw.PriceFactor==blankval) then begin
          tstr = "";
        end else begin
          tstr = ValToString(IVCashrw.FIFO*IVCashrw.Quant,M4UVal,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
        end;
        OUTFORMFIELD("F_PRICEFACTOR",tstr);
        OUTFORMFIELD("F_EXCISE",IVCashrw.ExciseNr);
        if (FIELDINFORM("F_ORIGINCOUNTRY")) then begin
          GetOriginCoutry(IVCashrw.ArtCode,"",tstr);
          OUTFORMFIELD("F_ORIGINCOUNTRY",tstr);
        end;
        CashInvVat(IVCashrw.stp,IVCashr.InclVAT,IVCashr.NoTAXonVAT,0,IVCashrw.VATCode,IVCashrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
        if (FIELDINFORM("F_ROWBASE")) then begin
          t = IVCashrw.Sum;
          if (IVCashr.InclVAT>0) then begin
            if (t!=0) then begin
              t = t - vatval;
            end;
          end;    
          OUTFORMFIELD("F_ROWBASE",t);
        end;
        if (nonblank(IVCashrw.ArtCode)) then begin
          if (FIELDINFORM("F_ROWVATVAL")) then begin
            if (true) then begin//nonblank(vatval)
            GetFieldArgument(Docr,F_ROWVATVAL,tstr);
            if (nonblank(tstr)) then begin
              PrintValueInclZero("F_ROWVATVAL",Round(vatval,SetRoundModeD(StringToInt(tstr))),M45Val,LangNrr,SFb,false);
            end else begin
              if (blank(vatprc)) then begin 
                PrintValueInclZero("F_ROWVATVAL",0,M4Val,LangNrr,SFb,false);
              end else begin
                PrintValueInclZero("F_ROWVATVAL",vatval,M4Val,LangNrr,SFb,false);
              end;
            end;
            end;
          end;
        end;
        if (blank(vatprc)) then begin 
          PrintValue("F_ROWVATPRC",0,M4Val,LangNrr,SFb,false);
        end else begin
          PrintValueInclZero("F_ROWVATPRC",vatprc,M4Val,LangNrr,SFb,false);
        end;
        PrintValueInclZero("F_ROWVATEXCLPRC",vatexclprc,M4Val,LangNrr,SFb,false);
        OUTFORMFIELD("F_ROWSUMIFNOVAT",IVCashrw.Sum-vatval);      
        OUTFORMFIELD("F_ROWPRICE",IVCashrw.Price-vatval/IVCashrw.Quant);      
        AddVATBase(VATr,IVCashrw.VATCode,IVCashrw.Sum,blankval,vatcnt,IVCashr.InclVAT,IVCashr.NoTAXonVAT);

        OUTFORMFIELD("F_MOTHERNR",IVCashrw.MotherNr);
        BTr.ArtCode  = IVCashrw.ArtCode;
        BTr.SerialNr = IVCashrw.SerialNr;
        if (ReadFirstMain(BTr,2,true)) then begin 
          OUTFORMFIELD("F_SUPPSERIALNR",BTr.SuppSerialNr);
          OUTFORMFIELD("F_MAJORSTONE",BTr.MajStoneDet);
          OUTFORMFIELD("F_COLOUR",BTr.Colour);
          OUTFORMFIELD("F_CLARITY",BTr.Clarity);
          OUTFORMFIELD("F_CERT",BTr.Cert);
          OUTFORMFIELD("F_MINORSTONE",BTr.MinStoneDet);
          OUTFORMFIELD("F_METAL",BTr.Metal);
          OUTFORMFIELD("F_ROWWEIGHT",BTr.RowWeight);
          OUTFORMFIELD("F_SIZE",BTr.Size);
          OUTFORMFIELD("F_LENGTH",BTr.Length);
      
          OUTFORMFIELD("F_WATCHBRAND",BTr.WatchBrand);
          OUTFORMFIELD("F_STYLENAME",BTr.StyleName);
          OUTFORMFIELD("F_WATCHMETAL",BTr.WatchMetal);
          OUTFORMFIELD("F_MOVEMENT",BTr.Movement);
          OUTFORMFIELD("F_BRCSTR",BTr.BrcStr);
          OUTFORMFIELD("F_GENDER",BTr.Gender);
          OUTFORMFIELD("F_OTHER",BTr.Other);
          OUTFORMFIELD("F_OTHER2",BTr.Other2);
        end;  

        if (FIELDINFORM("F_ROWTOT")) then begin
          v = IVCashrw.Sum;
          if (IVCashr.InclVAT==0) then begin
            v = v + vatval;
          end;
          if ((nonblank(vatval)) or (nonblank(IVCashrw.Sum))) then begin
            GetFieldArgument(Docr,F_ROWTOT,tstr);
            if (nonblank(tstr)) then begin
              if (blank(IVCashrw.ArtCode)) then begin
                PrintValue("F_ROWTOT",Round(v,SetRoundModeD(StringToInt(tstr))),M45Val,LangNrr,SFb,false);
              end else begin
                PrintValueInclZero("F_ROWTOT",Round(v,SetRoundModeD(StringToInt(tstr))),M45Val,LangNrr,SFb,false);
              end;
            end else begin
              if (blank(IVCashrw.ArtCode)) then begin
                PrintValue("F_ROWTOT",v,M4Val,LangNrr,SFb,false);
              end else begin
                PrintValueInclZero("F_ROWTOT",v,M4Val,LangNrr,SFb,false);
              end;
            end;
          end;
        end;


        EndFormRow;
      case kInvoiceRowTypeGiftVoucherSold:
        OUTFORMFIELD("F_ROWNAME",USetStr(8112));
        OUTFORMFIELD("F_ARTNR",IVCashrw.GCNr);
        OUTFORMFIELD("F_SPECIFIKATION",IVCashrw.Spec);
        OUTFORMFIELD("F_GCNr",IVCashrw.GCNr);
        PrintValueInclZero("F_ANTAL",1.00,M4UVal,LangNrr,SFb,false);
        PrintValueInclZero("F_BELOPP",IVCashrw.Sum,M4Val,LangNrr,SFb,false);
        EndFormRow;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        PointsSpent = PointsSpent + IVCashrw.Points;
    end;
  end;    
  RETURN;
END;

procedure CalculatePayModesAmounts(record IVCashVc IVCashr,var vector val vpaymodes,var vector string ivpaymode)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;

  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeCashPayment:
        vpaymodes[kInvoiceRowTypeCashPayment] = vpaymodes[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeCashPayment] = IVCashrw.PayMode;
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodes[kInvoiceRowTypeCreditCardPayment] = vpaymodes[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeCreditCardPayment] = IVCashrw.PayMode;
      case kInvoiceRowTypeChequePayment:
        vpaymodes[kInvoiceRowTypeChequePayment] = vpaymodes[kInvoiceRowTypeChequePayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeCreditCardPayment] = IVCashrw.PayMode;
      case kInvoiceRowTypeGiftVoucherPayment:
        vpaymodes[kInvoiceRowTypeGiftVoucherPayment] = vpaymodes[kInvoiceRowTypeGiftVoucherPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeGiftVoucherPayment] = IVCashrw.PayMode;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment] = vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeLoyaltyPointsPayment] = IVCashrw.PayMode;
    end;
  end;
  return;
end;

procedure PrintPayModes(vector val vpaymodes,vector string ivpaymode,record LangNrVc LangNrr)
begin
  string 100 accstr,tstr;
  record SysFormatBlock SFb;
  
  BlockLoad(SFb);
  if (nonblank(vpaymodes[kInvoiceRowTypeCashPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeCashPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeCashPayment],M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeCreditCardPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeCreditCardPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeCreditCardPayment],M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeChequePayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeChequePayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeChequePayment],M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeGiftVoucherPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeGiftVoucherPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeGiftVoucherPayment],M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeLoyaltyPointsPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment],M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  return;
end;

procedure CCSlipPrintNote(string formfield,record NotepadVc Noter)
BEGIN
  Integer i,rwcnt;
  string 255 tstr;
  
  rwcnt = LineTextCnt(Noter);
  for (i=0;i<rwcnt;i=i+1) begin
    tstr = LineTextGet(Noter,i);
    OUTFORMFIELD(formfield,tstr);    
  end;  
  RETURN;
END;

procedure CCSlipNotePrintNote(string formfield,record IVCashVc IVCashr,string argumentstr)
begin
  record CouponVc Couponr;
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;
  Boolean found;

  Couponr.IVNr = IVCashr.SerNr;
  Couponr.OriginType = 2;
  found = true;
  while (LoopKey("OriginType",Couponr,2,found)) begin
    if (Couponr.IVNr!=IVCashr.SerNr) then begin found = false; end;
    if (Couponr.OriginType!=2) then begin found = false; end;
    if (found) then begin
      notenr = 1;
      while (ReadRecordLink(Couponr,notenr,Noter,RLr)) begin
        if ((argumentstr==Noter.Classification) or (blank(argumentstr))) then begin
          CCSlipPrintNote(formfield,Noter);
          goto LCCSlipNotePrintNote;
        end;
        notenr = notenr + 1;
      end;
    end;
LCCSlipNotePrintNote:;  
  end;
  return;
end;

procedure PrintInvCashForm(record RcVc RepSpec,record LangNrVc LangNrr,record DocVc Docr,record IVCashVc IVCashr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  record CUVc CUr;
  string 255 tstr;
  record RoundBlock RoundRec;
  val t;
  record SMVc VATr;
  Integer vatcnt;
  string 30 langcode,orgchain;
  vector val vpaymodes;
  record UserVc Userr;
  vector string 10 ivpaymode;
  val PointsSpent,totdiscount;
  row LegalInvNrBlock LINrbrw;
  Area orgchaina;
  LongInt al,posa;
  record EInvoiceBlock EIb;
  record SysFormatBlock SFb;

  RecordClear(VATr);
  SetupVATBase(VATr,vatcnt);          
  CUr.Code = IVCashr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  BlockLoad(RoundRec);  
  BlockLoad(SFb);  
  if (IVCashr.Prntdf==0) then begin
    OUTFORMFIELD("F_COPYTYPE",USetStr(18630));
  end else begin
    OUTFORMFIELD("F_COPYTYPE",USetStr(18631));
  end;
  OUTFORMFIELD("F_KUNDNAMN",CUr.Name);   
  OUTFORMFIELD("F_BANKACC",CUr.BankAccount);
  PrintCountryCode("F_CUCOUNTRYCODE",CUr.CountryCode)
  if (nonblank(IVCashr.OfficialSerNr)) then begin
    BlockLoad(EIb);
    GetLegalInvNrRow(IVCashr.OfficialSerNr,LINrbrw);
    OUTFORMFIELD("F_LEGALINVNOAPPROVALNO",LINrbrw.ApprovalNr);
    OUTFORMFIELD("F_LEGALINVNOAPPROVALYEAR",LINrbrw.ApprovalYear);
    OUTFORMFIELD("F_LEGALINVNOCERTIFICATENO",LINrbrw.CertificateNr);
    if (HasLocalization("BOL")) then begin
      orgchain = OriginalChainDigitalSeal_IVCash(EIb,IVCashr,totdiscount,LINrbrw,orgchaina);
      if (FieldInForm("F_DIGITALSEAL")) then begin
        tstr = orgchain;
        while (len(orgchain)>0) begin
          i = len(orgchain);
          if (i>128) then begin
            i = 128;
          end;
          OUTFORMFIELD("F_DIGITALSEAL",left(tstr,i));
          tstr = right(orgchain,len(tstr)-i);
        end;
      end;
      if (FieldInForm("F_ORIGINALCHAIN")) then begin
        al = GetAreaLength(orgchaina);
        posa = 0;
        while (posa<al) begin
          tstr = GetStringFromArea(orgchaina,posa,128);
          OUTFORMFIELD("F_ORIGINALCHAIN",tstr);
          posa = posa + len(tstr);
        end;          
      end;
      if (FieldInForm("F_TAXADMINSERVICECHAIN")) then begin
        FindTaxAdminServiceChain_IVCash(IVCashr,orgchain,orgchaina);
        al = GetAreaLength(orgchaina);
        posa = 0;
        while (posa<al) begin
          tstr = GetStringFromArea(orgchaina,posa,128);
          OUTFORMFIELD("F_TAXADMINSERVICECHAIN",tstr);
          posa = posa + len(tstr);
        end;          
      end;
    end;
//            OUTFORMFIELD("F_TAXADMINSERVICECERTIFICATENO",IVCashr.TaxAdminServCertificateNr);
//            OUTFORMFIELD("F_TAXADMINSERVICESIGNATURETIMESTAMP",IVCashr.TaxAdminServSignatureTimeStamp);
    OUTFORMFIELD("F_TAXADMINSERVICESEAL",IVCashr.TaxAdminServSeal);
    OUTFORMFIELD("F_OFFICIALSERNOSERIE",left(IVCashr.OfficialSerNr,len(LINrbrw.Serie)));
    if (HasLocalization("HRV")) then begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",StringToLongInt(Right(IVCashr.OfficialSerNr,len(IVCashr.OfficialSerNr)-len(LINrbrw.Serie))));
    end else begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",Right(IVCashr.OfficialSerNr,len(IVCashr.OfficialSerNr)-len(LINrbrw.Serie)));
    end;
  end;
  
  OUTFORMFIELD("F_KUNDMOMSNR",IVCashr.VATNr);
  OUTFORMFIELD("F_REGNUMBER1",IVCashr.RegNr1);
  OUTFORMFIELD("F_REGNUMBER2",IVCashr.RegNr2);
  OUTFORMFIELD("F_FAKTURANUMMER",IVCashr.SerNr);
  OUTFORMFIELD("F_SERNR",IVCashr.SerNr);
  OUTFORMFIELD("F_FISCALDEVICESEQNO",IVCashr.FiscalDeviceSeqNr);   
  OUTFORMFIELD("F_KUNDNR",IVCashr.CustCode);
  OUTFORMFIELD("F_UTBETDATUM",IVCashr.PayDate);
  OUTFORMFIELD("F_UTBETDATUMHIJRI",ConvertDate(kCalendarGregorian,IVCashr.PayDate,kCalendarHijri));
  OUTFORMFIELD("F_TRANSDATE",IVCashr.TransDate);
  OUTFORMFIELD("F_TRANSDATEHIJRI",ConvertDate(kCalendarGregorian,IVCashr.TransDate,kCalendarHijri));
  OUTFORMFIELD("F_VARREFERENS",IVCashr.OurContact);
  OUTFORMFIELD("F_ERREFERENS",IVCashr.ClientContact);
  OUTFORMFIELD("F_PAYMODE",IVCashr.PayDeal);
  OUTFORMFIELD("F_PAYMODE2",IVCashr.PayDeal2);
  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(IVCashr.PayDeal,IVCashr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;
  if (FIELDINFORM("F_VILLKOR2")) then begin
    GetPayDealText(IVCashr.PayDeal2,IVCashr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR2",tstr);
  end;
  OUTFORMFIELD("F_AVRUNDNING",IVCashr.Sum0);
  OUTFORMFIELD("F_SUMMAMEDMOMS",IVCashr.Sum4-IVCashr.Sum3);
  if (IVCashr.InclVAT>0) then begin
    t = IVCashr.Sum4 - IVCashr.Sum3 - IVCashr.Sum2;
  end else begin
    t = IVCashr.Sum1 - IVCashr.Sum2;
  end;  
  PrintValueInclZero("F_SUMMAMOMSPLIKTIGT",t,M4Val,LangNrr,SFb,false);
  OUTFORMFIELD("F_SUMMA",IVCashr.Sum1);
  OUTFORMFIELD("F_SUMMAMOMS",IVCashr.Sum1-IVCashr.Sum2);
  OUTFORMFIELD("F_MOMS",IVCashr.Sum3);
  OUTFORMFIELD("F_ATTBETALA",IVCashr.Sum4);
  if (FIELDINFORM("F_ATTBETALATEXT")) then begin
    GetFieldArgument(Docr,F_ATTBETALATEXT,tstr);
    Val2ToText(tstr,IVCashr.Sum4,M4Val,IVCashr.CurncyCode,IVCashr.LangCode,tstr);
    OUTFORMFIELD("F_ATTBETALATEXT",tstr);
  end;
  if (FIELDINFORM("F_RATE")) then begin
    GetFullCurncyRateText(true,tstr,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2);                    
    OUTFORMFIELD("F_RATE",tstr);
  end;  
  if (FIELDINFORM("F_BASERATE")) then begin
    GetFullCurncyRateText(false,tstr,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2);                    
    OUTFORMFIELD("F_BASERATE",tstr);
  end;  
  OUTFORMFIELD("F_CREDCARD",IVCashr.CreditCard);
  if (FIELDINFORM("F_CREDCARDTYPE")) then begin
    GetCreditCardType(IVCashr.CreditCard,tstr);
    OUTFORMFIELD("F_CREDCARDTYPE",tstr);
  end;  
  OUTFORMFIELD("F_AUTHORISATION",IVCashr.AuthorizationCode);
  OUTFORMFIELD("F_CREDCARD2",IVCashr.CreditCard2);
  if (FIELDINFORM("F_CREDCARDTYPE2")) then begin
    GetCreditCardType(IVCashr.CreditCard2,tstr);
    OUTFORMFIELD("F_CREDCARDTYPE2",tstr);
  end;  
  OUTFORMFIELD("F_AUTHORIZATION",IVCashr.AuthorizationCode2);
  
  OUTFORMFIELD("F_FAKTKOMMENTAR",IVCashr.InvComment);
  OUTFORMFIELD("F_OBJECT",IVCashr.Objects);
  if (FIELDINFORM("F_OBJEKTTEXT")) then begin
    GetObjectText(IVCashr.Objects,tstr);
    OUTFORMFIELD("F_OBJEKTTEXT",tstr);
  end;  
  OUTFORMFIELD("F_LOCATION",IVCashr.Location);
  if (FIELDINFORM("F_LOCATIONNAME")) then begin
    GetLocationName(IVCashr.Location,tstr);
    OUTFORMFIELD("F_LOCATIONNAME",tstr);
  end;  
  if (FIELDINFORM("F_LOCCONTACT")) then begin
    GetLocationContact(IVCashr.Location,tstr);
    OUTFORMFIELD("F_LOCCONTACT",tstr);
  end;  
  if (FIELDINFORM("F_LOCPHONE")) then begin
    GetLocationPhone(IVCashr.Location,tstr);
    OUTFORMFIELD("F_LOCPHONE",tstr);
  end;  
  if (FIELDINFORM("F_LOCFAX")) then begin
    GetLocationFax(IVCashr.Location,tstr);
    OUTFORMFIELD("F_LOCFAX",tstr);
  end;  
  if (FIELDINFORM("F_LOCEMAIL")) then begin
    GetLocationEmail(IVCashr.Location,tstr);
    OUTFORMFIELD("F_LOCEMAIL",tstr);
  end;  
  if (FIELDINFORM("F_LOCADDRESS")) then begin
    GetLocationAddress(IVCashr.Location,1,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(IVCashr.Location,2,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(IVCashr.Location,3,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(IVCashr.Location,4,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(IVCashr.Location,5,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
  end;  
  OUTFORMFIELD("F_CREDCARD2",IVCashr.CreditCard);
  if (FIELDINFORM("F_CREDCARDTYPE2")) then begin
    GetCreditCardType(IVCashr.CreditCard,tstr);
    OUTFORMFIELD("F_CREDCARDTYPE2",tstr);
  end;  
  OUTFORMFIELD("F_FAKTURADATUM",IVCashr.TransDate);
  OUTFORMFIELD("F_FAKTURADATUMHIJRI",ConvertDate(kCalendarGregorian,IVCashr.TransDate,kCalendarHijri));
  OUTFORMFIELD("F_FORFALLODATUM",IVCashr.PayDate);
  OUTFORMFIELD("F_FORFALLODATUMHIJRI",ConvertDate(kCalendarGregorian,IVCashr.PayDate,kCalendarHijri));
  OUTFORMFIELD("F_BAGGER",IVCashr.Bagger);
  Userr.Code = IVCashr.Bagger;
  ReadFirstMain(Userr,1,true);
  OUTFORMFIELD("F_BAGGERNAME",Userr.Name);
  OUTFORMFIELD("F_SALESCLERK",IVCashr.Supervisor);
  Userr.Code = IVCashr.Supervisor;
  ReadFirstMain(Userr,1,true);
  OUTFORMFIELD("F_SALESCLERKNAME",Userr.Name);
  OUTFORMFIELD("F_SALJARE",IVCashr.SalesMan);
  Userr.Code = IVCashr.SalesMan;
  ReadFirstMain(Userr,1,true);
  OUTFORMFIELD("F_SALJARNAMN",Userr.Name);
  OUTFORMFIELD("F_RECVALUE",IVCashr.RecValue);
  OUTFORMFIELD("F_RETVALUE",IVCashr.RetValue);
  OUTFORMFIELD("F_KUNDORDNRFROMINV",IVCashr.CustOrdNr);
  OUTFORMFIELD("F_DANREFNUMBER",IVCashr.PriceList);
  OUTFORMFIELD("F_POSNR",IVCashr.POSNr);
  OUTFORMFIELD("F_TRANSTIME",IVCashr.TransTime);
  CalculatePayModesAmounts(IVCashr,vpaymodes,ivpaymode);
  PrintPayModes(vpaymodes,ivpaymode,LangNrr);
  OUTFORMFIELD("F_RECVALUE2",IVCashr.RecValue2);
  OUTFORMFIELD("F_CASHVALUE",IVCashr.CashValue + vpaymodes[kInvoiceRowTypeCashPayment] + vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment]);
  OUTFORMFIELD("F_CHANGE",IVCashr.RetValue);
  OutAddress("F_ADRESS",IVCashr.Addr0,IVCashr.Addr1,IVCashr.Addr2,IVCashr.Addr3,IVCashr.InvAddr3,IVCashr.InvAddr4);
  OUTFORMFIELD("F_ADDR1",IVCashr.Addr0);
  OUTFORMFIELD("F_ADDR2",IVCashr.Addr1);
  OUTFORMFIELD("F_ADDR3",IVCashr.Addr2);
  OUTFORMFIELD("F_ADDR4",IVCashr.Addr3);
  OUTFORMFIELD("F_INVADDR3",IVCashr.InvAddr3);
  OUTFORMFIELD("F_INVADDR4",IVCashr.InvAddr4);
  OUTFORMFIELD("F_REFSTR",IVCashr.RefStr);
  if (nonblank(IVCashr.OfficialSerNr2)) then begin
    OUTFORMFIELD("F_OFFICIALSERNO",IVCashr.OfficialSerNr2);
  end else begin
    if (HasLocalization("PRT")) then begin
      OUTFORMFIELD("F_OFFICIALSERNO",GetOffSerNrIVJournalID(IVCashr.SerNr,"IVCashVc",IVCashr.OfficialSerNr) & " " & IVCashr.OfficialSerNrSerie & "/" & Right(IVCashr.OfficialSerNr,len(IVCashr.OfficialSerNr)-len(IVCashr.OfficialSerNrSerie)));
    end else begin
      OUTFORMFIELD("F_OFFICIALSERNO",IVCashr.OfficialSerNr);
    end;
  end;
  OUTFORMFIELD("F_OFFICIALSERNO2",IVCashr.OfficialSerNr2);
  if (FieldInForm("F_CROATIANCONTROLCODE")) then begin
    OUTFORMFIELD("F_CROATIANCONTROLCODE",MakeCroatianControlCode(IVCashr.InvDate,IVCashr.TransTime,IVCashr.SerNr,IVCashr.Location,IVCashr.TerminalID,IVCashr.Sum4));
  end;
  OUTFORMFIELD("F_TERMINALID",IVCashr.TerminalID);
  OUTFORMFIELD("F_MACHINE",IVCashr.LocalMachineCode);
  OUTFORMFIELD("F_SAFTHASHCONTROL",SAFTHashControl(IVCashr.Hash));
  if (HasLocalization("PRT")) then begin
    tstr = USetStr(17251);
    switch (IVCashr.Status) begin
      case kRecordStatusManual:
        tstr = USetStr(23355) & "-" & tstr & "M " & IVCashr.OfficialSerNr2;
      case kRecordStatusRecovered:
        tstr = USetStr(23355) & "-" & tstr & "D " & IVCashr.OfficialSerNr2;
      otherwise
        tstr = "";
    end;
    OUTFORMFIELD(F_SAFTCOPYOFORIGINALDOCUMENT,tstr);
  end;


  OUTFORMFIELD("F_PRINTDATE",IVCashr.PrintDate);

  if (FIELDINFORM("F_PRICETEXT")) then begin
    if (IVCashr.InclVAT!=0) then begin
      OUTFORMFIELD("F_PRICETEXT",USetStr(2067));
    end else begin
      OUTFORMFIELD("F_PRICETEXT",USetStr(2068));
    end;
  end;  
  if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
    GetFieldArgument(Docr,F_AMOUNTINTEXT,tstr);
    Val2ToText(tstr,IVCashr.Sum4,M4Val,IVCashr.CurncyCode,IVCashr.LangCode,tstr);
    OUTFORMFIELD("F_AMOUNTINTEXT",tstr);
  end;
  if (IVCashr.Prntdf!=0) then begin
    if (IVCashr.OKFlag!=0) then begin
      OUTFORMFIELD("F_DUPLICATE",USetStr(18632) & " " & CurrentDate);
    end;
  end;
  
  PrintCashInvRows(RepSpec,IVCashr,VATr,vatcnt,LangNrr,Docr,RoundRec,PointsSpent);
  PrintLoyaltyCard(LangNrr,IVCashr.LoyaltyCardNr,IVCashr.LCMLevel,IVCashr.Points,PointsSpent,IVCashr.SerNr,"IVCashVc");
  PrintLastPageFields(Docr,LangNrr,IVCashr,VATr,vatcnt,RoundRec,SFb);
  if (FIELDINFORM("F_CCSLIPNOTE")) then begin
    GetFieldArgument(Docr,F_CCSLIPNOTE,tstr);
    CCSlipNotePrintNote("F_CCSLIPNOTE",IVCashr,tstr);
  end;
  if (FIELDINFORM("F_CCSLIPNOTE2")) then begin
    GetFieldArgument(Docr,F_CCSLIPNOTE2,tstr);
    CCSlipNotePrintNote("F_CCSLIPNOTE2",IVCashr,tstr);
  end;
  return;
end;

global
procedure DoInvCashForm(record RcVc RepSpec,record IVCashVc IVCashr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  val t;
  record LangNrVc LangNrr;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  record DocVc Docr;
  record CashierDefBlock CDb;
  vector val vpaymodes;
  record UserVc Userr;
  vector string 10 ivpaymode;
  val PointsSpent,totdiscount;
  row LegalInvNrBlock LINrbrw;
  boolean testf;// Edit ************************** Tuesday, 2 June 2015 12:32:14
  
  GetLangNr(IVCashr.LangCode,LangNrr);
  BlockLoad(CDb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoInvCashForm;
  end;
  rwcnt = MatRowCnt(FDr);
  langcode = IVCashr.LangCode;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (IVCashr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(IVCashr.OKFlag,FDrw.Typ)) then begin 
      	testf = true;// Edit ************************** Tuesday, 2 June 2015 12:33:04
      	if(nonblank(IVCashr.LocalMachineCode) and IVCashr.LocalMachineCode!=FDrw.PrintGroupCode and nonblank(FDrw.PrintGroupCode))then begin testf = false; end;// Edit ************************** Tuesday, 2 June 2015 12:33:07
      	if(testf)then begin// Edit ************************** Tuesday, 2 June 2015 12:33:06
					if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVCashr.SerNr,FDrw.PrintGroupCode,
													langcode,intdocnr,"IVCashVc",formcode)) then
					begin
						goto LBREAK;
					end;
        end;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
          if (IVCashr.OKFlag!=0) then begin
            if (IVCashr.Prntdf!=0) then begin
              if (CDb.CashSalesToFiscalControlUnit==0) then begin
                //FormWaterMark(1118,-1); //Edit***************************Sasha2,16:36 08.01.2015
              end else begin
                //FormWaterMark(1118,1); //Edit***************************Sasha2,16:36 08.01.2015
              end;
            end;
          end;
          CommonDocumentFields(RepSpec);
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(IVCashr));
          OUTFORMFIELD("F_DOCTYPE",USetStr(23455));
          Docr.Code = formcode;
          if (ReadFirstMain(Docr,1,true)) then begin
          end;
          
          PrintInvCashForm(RepSpec,LangNrr,Docr,IVCashr);
          
          CloseForm;        
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoInvCashForm:;  
  RETURN;
END;

global
procedure DoInvCashRetForm(record RcVc RepSpec,record IVCashVc IVCashr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  val t;
  record LangNrVc LangNrr;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  record DocVc Docr;
  record CashierDefBlock CDb;
  vector val vpaymodes;
  record UserVc Userr;
  vector string 10 ivpaymode;
  val PointsSpent,totdiscount;
  row LegalInvNrBlock LINrbrw;
  
  GetLangNr(IVCashr.LangCode,LangNrr);
  BlockLoad(CDb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoInvCashRetForm;
  end;
  rwcnt = MatRowCnt(FDr);
  langcode = IVCashr.LangCode;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (IVCashr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(IVCashr.OKFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVCashr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVCashVc",formcode)) then
        begin
          goto LBREAK;
        end;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
          if (IVCashr.OKFlag!=0) then begin
            if (IVCashr.Prntdf!=0) then begin
              if (CDb.CashSalesToFiscalControlUnit==0) then begin
                FormWaterMark(1118,-1);
              end else begin
                FormWaterMark(1118,1);
              end;
            end;
          end;
          CommonDocumentFields(RepSpec);
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(IVCashr));
          OUTFORMFIELD("F_DOCTYPE",USetStr(23455));
          Docr.Code = formcode;
          if (ReadFirstMain(Docr,1,true)) then begin
          end;
          
          PrintInvCashForm(RepSpec,LangNrr,Docr,IVCashr);
          
          CloseForm;        
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoInvCashRetForm:;  
  RETURN;
END;
