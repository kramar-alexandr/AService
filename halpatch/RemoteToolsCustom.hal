external updating procedure RecalcORShops(string); //Edit***************************Sasha2,17:05 31.10.2014external procedure CalcEANCHS(var string); //Edit***************************Sasha2,17:05 31.10.2014 external procedure ORVc_PastePrice(var record ORVc,Integer,var Boolean); //Edit***************************Sasha2,14:50 28.07.2015external procedure ORDchsum(var record ORVc,Integer); //Edit***************************Sasha2,14:51 28.07.2015external procedure ORSumup(var record ORVc); //Edit***************************Sasha2,14:51 28.07.2015global //Edit***************************Sasha2,15:45 04.08.2015 {updating function Boolean HandleFromITeckToMMR(record INVc INr,integer currcomp)begin  Boolean res;        res = false;    if (SETCOMPANY(6,false)) then begin      if (RECORDSTORE(INr,true)) then begin        res = true;      end;      RESETCOMPANY(currcomp);    end;        HandleFromITeckToMMR = res;      return;end; //Edit***************************Sasha2,15:45 04.08.2015 }global //Edit***************************Sasha2,14:33 28.07.2015 {updating procedure HandleUpdatePricesInORFromStockMov(record StockMovVc SMr,var string error)begin  record ORVc ORr;	row ORVc ORrw;	record IVVc IVr;	row StockMovVc SMrw;	integer i,rwcnt;	Boolean chsum,sumupf;		  sumupf = false;	  ORr.SerNr = SMr.OrderNr;   	if (ReadFirstMain(ORr,1,true) /*and ORr.OrderClass=="Shops"*/) then begin      if (ORr.OKFlag>0 or ORr.Closed>0) then begin        error = "Target Order is OKed or closed";        goto LHandleUpdatePricesInORFromStockMov;      end;      IVr.OrderNr = ORr.SerNr;      if (ReadFirstKey("OrderNr",IVr,1,true)) then begin        error = "Target Order has Invoice";        goto LHandleUpdatePricesInORFromStockMov;      end;      rwcnt = MatRowCnt(SMr);      for (i=0;i<rwcnt;i=i+1) begin        MatRowGet(SMr,i,SMRw);        if (SMRw.ORRow>-1) then begin          MatRowGet(ORr,SMRw.ORRow,ORrw);          if (SMRw.ArtCode==ORrw.ArtCode) then begin            chsum = false;            ORrw.Price = Round(SMRw.NewPrice + SMRw.NewPrice*(0.09),DefaultCurRoundOff);            MatRowPut(ORr,SMRw.ORRow,ORrw);            ORVc_PastePrice(ORr,SMRw.ORRow,chsum);            if (chsum) then begin              ORDchsum(ORr,SMRw.ORRow);              sumupf = true;            end;          end;        end;      end;      if (sumupf) then begin        ORSumup(ORr);      end;      RECORDSTORE(ORr,true);  	end;  	  LHandleUpdatePricesInORFromStockMov:;    return;end; //Edit***************************Sasha2,14:33 28.07.2015 }globalprocedure BarcodeIncrement(var string barcode,Integer increment)begin  integer lenght,i,lastindex,leftover,base,incr;  array integer digit;  boolean testf;        testf = true;    lenght = len(barcode);    incr = increment;    for (i=0;i<lenght;i=i+1) begin      digit[i] = StringToInt(mid(barcode,i,1));      lastindex = i;    end;    digit[lastindex] = digit[lastindex] + incr;    while (digit[lastindex]>9 and testf) begin      leftover = Mod(digit[lastindex],10);      base = digit[lastindex] - leftover;      if (base>0) then begin        digit[lastindex] = leftover;        incr = base/10;        lastindex = lastindex - 1;        digit[lastindex] = digit[lastindex] + incr;      end;      if (lastindex==0 and digit[lastindex]>9) then begin        testf = false;      end;    end;    barcode = "";    if (testf) then begin      for (i=0;i<lenght;i=i+1) begin        barcode = barcode & digit[i];      end;    end;   return; end;global  //Edit***************************Sasha2,12:00 22.01.2015 {updating procedure HandleSetEAN13PU(var record PUVc PUr)begin  row PUVc PUrw;  record INVc INr,IN2r;  integer mrcnt,i;  string 40 barcode,tempean;  boolean TrHs,testf;      mrcnt = MatRowCnt(PUr);    for (i=0;i<mrcnt;i=i+1) begin      MatRowGet(PUr,i,PUrw);      if (NonBlank(PUrw.ArtCode) and blank(PUrw.AlternativeCode)) then begin        INr.Code = PUrw.ArtCode;        if (ReadFirstMain(INr,1,true)) then begin          if (NonBlank(INr.BarCode)) then begin            PUrw.AlternativeCode = INr.BarCode;            MatRowPut(PUr,i,PUrw);          end else begin            IN2r.BarCode = "2";            TrHs = true;            testf = true;            if (blank(tempean)) then begin              while (LoopKey("BarCode",IN2r,1,TrHs)) begin                if (left(IN2r.BarCode,1)!="2") then begin TrHs = false; end;                if (Len(IN2r.BarCode)==13) then begin testf = false; end;                if (Len(IN2r.BarCode)!=13 and testf==false) then begin TrHs = false; end;                if (TrHs) then begin                  tempean = IN2r.BarCode;                end;              end; RESETLOOP(IN2r);            end;            if (tempean=="2999999999991") then begin              goto LHandleSetEAN13PU;            end;            if (blank(tempean) or left(tempean,1)!="2" or len(tempean)!=13) then begin              barcode = "199999999999";            end else begin              barcode = mid(tempean,0,12);            end;            BarcodeIncrement(barcode,1);            if (NonBlank(barcode)) then begin               CalcEANCHS(barcode);              INr.BarCode = barcode;              tempean = barcode;              RECORDSTORE(INr,true);              PUrw.AlternativeCode = barcode;              MatRowPut(PUr,i,PUrw);            end;          end;        end;      end;    end;    LHandleSetEAN13PU:;      return;end; //Edit***************************Sasha2,12:01 22.01.2015 }globalupdating procedure CopyFrINToMyLabelItemMn(record RcVc RepSpec)BEGIN  boolean TrHs,testf;  record INvc INr;  row INvc INrw;  record MyLabelItemVc MLIr;  row MyLabelItemVc MLIrw;  integer rwcnt,i;  string 30 item;  TrHs = true;  INr.Code = "";  while (LoopMain(INr,1,TrHs)) begin  	testf = true;  	MLIr.ArtCode = INr.Code;  	if (!ReadFirstMain(MLIr,1,true)) then begin testf = false; end;  	if (nonblank(item) and INr.Code==item) then begin testf = false; end;  	if (testf) then begin  		item = INr.Code;  		INr.LPriceList = MLIr.PriceList;  		INr.LName = MLIr.Name;  		INr.LDefFormCode = MLIr.DefFormCode;  		INr.LComment = MLIr.Comment;  		INr.LCurncyCode = MLIr.CurncyCode;  		INr.LSize = MLIr.Size;  		INr.LCust1 = MLIr.Cust1;  		INr.LCust2 = MLIr.Cust2;  		INr.LCust3 = MLIr.Cust3;  		INr.LCust4 = MLIr.Cust4;  		INr.LCust5 = MLIr.Cust5;  		INr.LCustInt1 = MLIr.CustInt1;  		INr.LCustInt2 = MLIr.CustInt2;  		INr.LCustInt3 = MLIr.CustInt3;  		INr.LCustInt4 = MLIr.CustInt4;  		INr.LCustInt5 = MLIr.CustInt5;  		rwcnt = MatRowCnt(MLIr);  		for (i=0;i<rwcnt;i=i+1) begin  			MatRowGet(MLIr,i,MLIrw);  			INrw.LParam = MLIrw.Param;  			INrw.LName = MLIrw.Name;  			INrw.LComment1 = MLIrw.Comment1;  			INrw.LComment2 = MLIrw.Comment2;  			INrw.LComment3 = MLIrw.Comment3;  			INrw.LComment4 = MLIrw.Comment4;  			INrw.LComment5 = MLIrw.Comment5;  			INrw.LComment6 = MLIrw.Comment6;  			INrw.LComment7 = MLIrw.Comment7;  			INrw.LComment8 = MLIrw.Comment8;  			INrw.LArInt1 = MLIrw.ArInt1;  			INrw.LArInt2 = MLIrw.ArInt2;  			INrw.LArInt3 = MLIrw.ArInt3;  			INrw.LArInt4 = MLIrw.ArInt4;  			MatRowPut(INr,i,INrw);  		end;  		if (RECORDSTORE(INr,true)) then begin  		end;  	end;  end;  RETURN;END;globalupdating procedure ClearINPLMn(record RcVc RepSpec)BEGIN  record INVc INr;  record PLVc PLr;  record ItemStatusVc ISr;    while(loopmain(INr,1,true))begin  	if(INr.LastPriceChange<stringtodate("01/01/2014"))then begin			ISr.Code = INr.Code;			if(readfirstmain(ISr,1,true)==false)then begin				recorddelete(INr);				stepback(INr);			end;  	end;  end;    while(loopmain(PLr,1,true))begin  	INr.Code = PLr.ArtCode;  	if(readfirstmain(INr,1,true)==false)then begin  		recorddelete(PLr);  		stepback(PLr);  	end;  end;    RETURN;END;global //Edit***************************Sasha2,13:02 04.11.2014 {updating procedure RecalcShopsItemsMn(record RcVc RepSpec)BEGIN  record StockMovVc StockMovr;  row StockMovVc StockMovrw;  	  	RecalcORShops(RepSpec.f1);    RETURN;END; //Edit***************************Sasha2,13:02 04.11.2014 }global //Edit***************************Sasha2,12:34 25.03.2015 {function Boolean OverFlowStock_SerialNrAvail(string item,string ser)BEGIN  record SerBalVc SBr;  Boolean res,TrHs;  Integer qty;    qty = 0;  RESETLOOP(SBr);  SBr.Item = item;  SBr.Serial = ser;  TrHs = true;  while (LoopKey("ItemSerial",SBr,2,TrHs)) begin    if (SBr.Item!=item or SBr.Serial!=ser) then begin TrHs = false; end;    if (TrHs) then begin      qty = qty + SBr.Quant;    end;  end;  if (qty>0) then begin     res = true;   end;  OverFlowStock_SerialNrAvail = res;  RETURN;END; //Edit***************************Sasha2,12:34 25.03.2015 }global updating procedure INChangeSizeMn()begin	record INVc INr;		while(loopmain(INr,1,true))begin		INr.LSize = 7;		INr.LPriceList = "";		recordstore(INr,true);	end;	return;end;global //Edit***************************Sasha2,14:38 10.02.2016 {updating procedure SetClosedCUCARDAndLoyaltyCardMn()begin	record CUVc CUr,oldCUr;	record LoyaltyCardVc LCr,oldLCr;	boolean TrHs;		LCr.SerNr = "";	while (LoopMain(LCr,1,true)) begin	  RecordCopy(oldLCr,LCr);    LCr.Closed = 1;    if (RecordUpdate(oldLCr,LCr,true)==0) then begin end;	end;		TrHs = true;	CUr.CustCat = "CARD";	while (LoopKey("Group",CUr,1,TrHs)) begin		if (CUr.CustCat!="CARD") then begin TrHs = false; end;		if (TrHs) then begin		  RecordCopy(oldCUr,CUr);      CUr.blockedFlag = 1;      CUr.Name = CUr.Code;      if (RecordUpdate(oldCUr,CUr,true)==0) then begin end;		end;	end;		return;end; //Edit***************************Sasha2,14:39 10.02.2016 }global //Edit***************************Sasha2,14:33 28.07.2015 {procedure GetDefaultValuesMoveForServiceVc(var record MoveForServiceVc MoveForServicer,integer curcomp)begin	record CompaniesBlock CBb;  row CompaniesBlock CBrw;	integer i,rwcnt;	     BlockLoad(CBb);     rwcnt = MatRowCnt(CBb);     for (i=0;i<rwcnt;i=i+1) begin       MatRowGet(CBb,i,CBrw);       if (curcomp==StringToInt(CBrw.CompCode)) then begin         MoveForServicer.FromCompNr = curcomp;         MoveForServicer.FromCompName = CBrw.CompName;         i = rwcnt;       end;     end;     MoveForServicer.ToCompNr = 8;     MoveForServicer.ToCompName = "A-Service";     MoveForServicer.TransDate = CurrentDate;    return;end; //Edit***************************Sasha2,14:33 28.07.2015 }global //Edit***************************Sasha2,14:33 28.07.2015 {updating procedure CreateMoveForServiceFromStockMov(var record MoveForServiceVc MoveForServicer,record StockMovVc SMr,var string error)begin	record INVc INr;	row StockMovVc SMrw;	row MoveForServiceVc MoveForServicerw;	integer i,rwcnt,curcomp;	      curcomp = CurrentCompany;      RecordNew(MoveForServicer);      GetDefaultValuesMoveForServiceVc(MoveForServicer,curcomp);      MoveForServicer.StockMovSerNr = SMr.SerNr;      MoveForServicer.FromLocation = SMr.FrLocation;      rwcnt = MatRowCnt(SMr);      for (i=0;i<rwcnt;i=i+1) begin        MatRowGet(SMr,i,SMRw);        if (NonBlank(SMRw.ArtCode)) then begin          INr.Code = SMRw.ArtCode;          ReadFirstMain(INr,1,true);          ClearRow(MoveForServicer,MoveForServicerw,1);          MoveForServicerw.ArtCode = INr.Code;          MoveForServicerw.Spec = INr.Name;          MoveForServicerw.SerialNr = SMRw.SerialNr;          MoveForServicerw.SendQuant = SMRw.SentQuant;          MoveForServicerw.SendUser = CurrentUser;          MatRowPut(MoveForServicer,i,MoveForServicerw);        end;      end;      if (RECORDSTORE(MoveForServicer,true)) then begin        CreateRecordLink(MoveForServicer,curcomp,SMr,curcomp);          CreateRecordLink(SMr,curcomp,MoveForServicer,curcomp);       end else begin        error = "MoveForServiceVc was not saved";      end;  	  LCreateMoveForServiceFromStockMov:;    return;end; //Edit***************************Sasha2,14:33 28.07.2015 }global updating procedure RecalcRegisters2CurValMn()begin	integer i,mtrw;	val frrate,torate;	boolean error;	record TRVc TRr;	row TRVc TRrw;	record FBVc FBr;	row FBVc FBrw;		while(loopmain(FBr,1,true))begin		FBr.Diff2Val = blankval;		FBr.D2Sum = blankval;		FBr.C2Sum = blankval;		mtrw = matrowcnt(FBr);		frrate = blankval;		torate = blankval;				For(i=0;i<mtrw;i=i+1) begin			matrowget(FBr,i,FBrw);				if(FBrw.CurncyCode=="UAH")then begin					FBrw.CurDebVal = FBrw.Deb2Val;					FBrw.CurCredVal = FBrw.Cred2Val;				end;				if(FBrw.CurDebVal==0 and FBrw.CurCredVal==0)then begin					FBrw.CurncyCode = "";				end;				FBrw.Deb2Val = blankval;				FBrw.Cred2Val = blankval;					matrowput(FBr,i,FBrw);	  		end; 				recordstore(FBr,true);	end;		while(loopmain(TRr,1,true))begin		TRr.Diff2Val = blankval;		TRr.DSum2 = blankval;		TRr.CSum2 = blankval;		mtrw = matrowcnt(TRr);		frrate = blankval;		torate = blankval;		For(i=0;i<mtrw;i=i+1) begin			matrowget(TRr,i,TRrw);			if(TRrw.Curncy=="UAH")then begin				if(TRrw.BaseRate1!=0 and TRrw.BaseRate2!=0)then begin					frrate = TRrw.BaseRate2;					torate = TRrw.BaseRate1;				end;			end;		end;		error = false;		For(i=0;i<mtrw;i=i+1) begin			matrowget(TRr,i,TRrw);												if(TRrw.Curncy=="UAH")then begin					TRrw.CurDebVal = TRrw.DebVal2;					TRrw.CurCredVal = TRrw.CredVal2;					if(TRrw.BaseRate1!=0 and TRrw.BaseRate2!=0)then begin						TRrw.FrRate = TRrw.BaseRate2;						TRrw.ToRateB1 =	TRrw.BaseRate1;					end else begin						If(frrate!=0 and torate!=0)then begin							TRrw.FrRate = frrate;							TRrw.ToRateB1 =	torate;						end else begin							error = true;						end;					end;				end;				TRrw.DebVal2 = blankval;				TRrw.CredVal2 = blankval;				TRrw.BaseRate1 = blankval;				TRrw.BaseRate2 = blankval;											matrowput(TRr,i,TRrw);	  		end; 				if(!error)then begin			recordstore(TRr,true);		end;	end;	return;end;global updating procedure FixFBVcMn()begin	integer i,mtrw;	val frrate,torate;	boolean error;	record TRVc TRr;	row TRVc TRrw;	record FBVc FBr;	row FBVc FBrw;		while(loopmain(FBr,1,true))begin		mtrw = matrowcnt(FBr);				For(i=0;i<mtrw;i=i+1) begin			matrowget(FBr,i,FBrw);				if(FBrw.CurncyCode=="UAH")then begin					if(FBrw.Deb2Val!=0 or FBrw.Cred2Val!=0)then begin						FBrw.CurDebVal = FBrw.Deb2Val;						FBrw.CurCredVal = FBrw.Cred2Val;						logtext(0,FBr.SerNr & " 1 " & FBrw.AccNumber);					end else begin							FBrw.CurncyCode = "";							FBrw.CurDebVal = blankval;							FBrw.CurCredVal = blankval;							logtext(0,FBr.SerNr & " 2 " & FBrw.AccNumber);					end;				end;			matrowput(FBr,i,FBrw);	  		end; 				recordstore(FBr,true);	end;		return;end;