external function val FindAccBalance(string,string,date,record ObjBalVc,Integer,Integer,Integer,string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HT2Per(Date, Date , var string);
external procedure HTPers(string,var string);

procedure PersHead(record UserVc Userp,var val startbalp)
BEGIN
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,Userp.Code,false);
  OutString(2,0,Userp.Name,false);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(3184),false);
  OutString(90,0,USetStr(2435),false);
  OutString(140,0,USetStr(2436),false);
  OutString(3,0,USetStr(5190),true);
  OutString(4,0,USetStr(5191),true);
  OutString(450,0,USetStr(5189),true);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(6,0,USetStr(5192),false);
  OutVal(450,0,startbalp,M4Val,true);
  EndFormat;
  RETURN;
END;

procedure PersListTrans(var array string acur,var array val av1,var Integer curcnt,record RcVc RepSpec,record UserVc Userp,var val balp)
BEGIN
  record ExpVc Expr;
  record PPVc PPr;
  record CLOutVc CLOutr;
  record CLInVc CLInr;
  record PPrsVc PPrsr;
  row PPVc PPrw;
  row CLOutVc CLOutrw;
  row CLInVc CLInrw;
  val v,curv,SumDebet,SumCredit;
  Integer oprow,oprwcnt;
  string 255 tstr;
  Boolean found,custout;

  custout = false;
  if ((RepSpec.flags[1]==0) or (balp<>0)) then begin
    PersHead(Userp,balp);
    custout = true;
  end;
  PPrsr.Person = Userp.Code;
  PPrsr.TransDate = RepSpec.sStartDate;
  PPrsr.PPOKNr = -1;
  found = true;
  while (LoopMain(PPrsr,3,found)) begin
    if (found) then begin
      if (PPrsr.Person<>Userp.Code) then begin
        found = false;
      end;  
    end;    
    if (found) then begin
        if (PPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (custout==false) then begin
        PersHead(Userp,balp);
        custout = true;
      end;
      if (PPrsr.TransType==0) then begin
        Expr.SerNr = PPrsr.TransNr;
        if (ReadFirstMain(Expr,1,true)) then begin
          if (Expr.OKFlag<>0) and (Expr.Invalid==0) then begin
            v = Expr.PayVal;
            curv = MulRateToBase1(Expr.CurncyCode,v,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
            if (RepSpec.flags[2]==0) then begin
              v = curv;
            end else begin
              AddCurncyTotals(acur,av1,curcnt,Expr.CurncyCode,Expr.PayVal);
            end;
            balp = curv + balp;
            SumCredit = SumCredit + curv;
            StartFormat(15);
            OutDate(0,0,Expr.TransDate,false);
            OutString(90,0,USetStr(5185),false);
            tstr = Expr.SerNr;
            /*
            if (RepSpec.flags[2]==1) then begin
              tstr = tstr & " ";
              tstr = tstr & Expr.CurncyCode;
            end;  
            */          
            OutString(140,"DblExpVc",tstr,false);
            OutVal(4,0,v,M4Val,true);
            OutVal(450,0,balp,M4Val,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(1,0,Expr.CurncyCode,true);
            end;  
            EndFormat;
          end;
        end;
      end;
      if (PPrsr.TransType==1) then begin
          PPr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(PPr,1,true)) then begin
            if (PPrsr.TransDate<>PPr.TransDate) then begin goto L33; end;
            if (PPr.DoneFlag<>1) then begin goto L33; end;
            if (PPr.Invalid!=0) then begin goto L33; end;
            oprwcnt = MatRowCnt(PPr);
            for (oprow = 0; oprow<oprwcnt; oprow=oprow+1) begin
              MatRowGet(PPr,oprow,PPrw);
              if (PPrw.Person==Userp.Code) then begin
                if (custout==false) then begin
                  PersHead(Userp,balp);
                  custout = true;
                end;
                if (PPrw.stp==1) then begin
                  v = PPrw.PayVal;
                  curv = MulRateToBase1(PPr.CurncyCode,v,PPr.FrRate,PPr.ToRateB1,PPr.ToRateB2,PPr.BaseRate1,PPr.BaseRate2,DefaultCurRoundOff);
                  if (RepSpec.flags[2]==0) then begin
                    v = curv;
                  end;  
                end;
                if (PPrw.ovst==0) then begin
                  balp = balp - curv;
                  SumDebet = curv + SumDebet;
                  if (RepSpec.flags[2]==1) then begin
                    AddCurncyTotals(acur,av1,curcnt,PPr.CurncyCode,-PPrw.PayVal);
                  end;
                end;
                StartFormat(15);
                OutDate(0,0,PPr.TransDate,false);
                OutString(90,0,USetStr(5186),false);
                tstr = PPr.SerNr;
                if (RepSpec.flags[2]==1) then begin
                  tstr = tstr & " ";
                  tstr = tstr & PPr.CurncyCode;
                end;
                OutString(140,"DblPPVc",tstr,false);
                if (PPrw.ovst<>0) then begin
                  OutString(200,0,"O",false);                  
                end;
                OutVal(3,0,v,M4Val,true);//ovst
                OutVal(450,0,balp,M4Val,true);
                EndFormat;
              end;
            end;
          end;
L33:;
      end;
      if (PPrsr.TransType==2) then begin
          CLOutr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(CLOutr,1,true)) then begin
            if (PPrsr.TransDate!=CLOutr.TransDate) then begin goto L44; end;
            if (CLOutr.OKFlag!=1) then begin goto L44; end;
            if (CLOutr.Invalid!=0) then begin goto L44; end;
            oprwcnt = MatRowCnt(CLOutr);
            for (oprow = 0; oprow<oprwcnt; oprow=oprow+1) begin
              MatRowGet(CLOutr,oprow,CLOutrw);
              if (CLOutr.Person==Userp.Code) then begin
                if (custout==false) then begin
                  PersHead(Userp,balp);
                  custout = true;
                end;
                if (CLOutrw.Type==3) then begin
                  v = CLOutrw.Sum;
                  curv = MulRateToBase1(CLOutr.CurncyCode,v,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                  if (RepSpec.flags[2]==0) then begin
                    v = curv;
                  end else begin
                    AddCurncyTotals(acur,av1,curcnt,CLOutr.CurncyCode,-CLOutrw.Sum);
                  end;
                  balp = balp - curv;
                  SumDebet = SumDebet + curv;
                  StartFormat(15);
                  OutDate(0,0,CLOutr.TransDate,false);
                  OutString(90,0,USetStr(1194),false);
                  tstr = CLOutr.SerNr;
                  if (RepSpec.flags[2]==1) then begin
                    tstr = tstr & " ";
                    tstr = tstr & CLOutr.CurncyCode;
                  end;                  
                  OutString(140,"DblCLOutVc",tstr,false);
                  OutVal(3,0,v,M4Val,true);
                  OutVal(450,0,balp,M4Val,true);
                  EndFormat;
                end;
              end;
            end;
          end;
L44:;        
      end;
      if (PPrsr.TransType==3) then begin
          CLInr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(CLInr,1,true)) then begin
            if (PPrsr.TransDate!=CLInr.TransDate) then begin goto L55; end;
            if (CLInr.OKFlag!=1) then begin goto L55; end;
            if (CLInr.Invalid!=0) then begin goto L55; end;
            oprwcnt = MatRowCnt(CLInr);
            for (oprow = 0; oprow<oprwcnt; oprow=oprow+1) begin
              MatRowGet(CLInr,oprow,CLInrw);
              if (CLInr.Person==Userp.Code) then begin
                if (custout==false) then begin
                  PersHead(Userp,balp);
                  custout = true;
                end;
                if (CLInrw.Type==3) then begin
                  v = CLInrw.Sum;
                  curv = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                  if (RepSpec.flags[2]==0) then begin
                    v = curv;
                  end else begin
                    AddCurncyTotals(acur,av1,curcnt,CLInr.CurncyCode,CLInrw.Sum);
                  end;
                  balp = curv + balp;
                  SumCredit = SumCredit + curv;
                  StartFormat(15);
                  OutDate(0,0,CLInr.TransDate,false);
                  OutString(90,0,USetStr(1193),false);
                  tstr = CLInr.SerNr;
                  if (RepSpec.flags[2]==1) then begin
                    tstr = tstr & " ";
                    tstr = tstr & CLInr.CurncyCode;
                  end;                  
                  OutString(140,"DblCLInVc",tstr,false);
                  OutVal(4,0,v,M4Val,true);
                  OutVal(450,0,balp,M4Val,true);
                  EndFormat;
                end;
              end;
            end;
          end;
L55:;        
      end;      
    end;
  end;

  if (custout) then begin
    Black_Divider(9,1);
    v = SumDebet - SumCredit;
    StartFormat(15);
    if (ProgramType!=typStdExpenses) then begin
      OutString(6,0,USetStr(2429),false);
    end else begin
      OutString(6,0,USetStr(3202),false);
    end;
    OutVal(3,0,SumDebet,M4Val,true);
    OutVal(4,0,SumCredit,M4Val,true);
    EndFormat;
    StartFormat(5);
    EndFormat;
    StartFormat(15);
    if (ProgramType!=typStdExpenses) then begin
      OutString(6,0,USetStr(5193),false);
    end else begin
      OutString(6,0,USetStr(3203),false);
    end;
    OutVal(3,0,v,M4DVal,true);
    OutVal(4,0,v,M4CVal,true);
    EndFormat;
    if (true) then begin//RepSpec.flags[2] == 0 why?
      StartFormat(15);
      OutString(6,0,USetStr(3195),false);
      OutVal(450,0,balp,M4Val,true);
      EndFormat;
    end;
    Gray_Divider(0,1);
  end;
  RETURN;
END;

global
procedure GetAcc2StartBalance(string accstr,string objstr,Date bdp,Integer simf,Integer basecurncy,var val vp,string crncycode,Integer flags2)
BEGIN
  Date sbd;
  record AccVc Accr; 
  record ObjBalVc ObjBalr;
  Boolean ObjBals;
  string 255 ostr,crncy;

  crncy = crncycode;
  ostr = objstr;
  if (flags2!=0) then begin
    Accr.AccNumber = accstr;
    if (ReadFirstMain(Accr,1,true)) then begin
      if (nonblank(Accr.Curncy)) then begin
        if (blank(ostr)) then begin
          ostr = Accr.Curncy;
          ostr = ostr & "::";
        end else begin
          crncy = Accr.Curncy;
        end;
      end;  
    end;
  end;  
      
  ObjBalr.AccNumber = accstr;
  ObjBalr.Object = ostr;
  ObjBals = ReadFirstMain(ObjBalr,2,true);
      
  sbd = AddDay(bdp,-1);
  if (ObjBals) then begin
    vp = FindAccBalance(accstr,ostr,sbd,ObjBalr,simf,basecurncy,0,crncy,0);
  end else begin
    vp = 0;
  end;  
  RETURN;
END;

global
procedure PersPerRn(record RcVc RepSpec)
BEGIN
  record UserVc User;
  Boolean TrHs, testf;
  string 255 frcc,tocc,tstr;
  val v,sum1;
  val StartBal,TotCustBal,TotStartBal;
  Integer rw;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;

  if (RepSpec.wholemonthf==0) then begin
    MessageBox(1163,"");
    goto L99;
  end;
  frcc = FirstInRange(RepSpec.f1,5);
  tocc = LastInRange(RepSpec.f1,5);
  StartReportJob(USetStr(5180));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.flags[1]==1) then begin
     tstr = USetStr(6551);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (RepSpec.flags[2]==1) then begin
     tstr = USetStr(3204);
     Header(rw,tstr,0);
   end;
   HTPers(RepSpec.f1,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;  
  EndHeader;
  SetRepCol(2,60);
  SetRepCol(3,288);
  SetRepCol(4,384);
  SetRepCol(5,293);
  SetRepCol(6,140);
  SetRepCol(9,221);
 
  User.Code = frcc;
  TrHs = true;
  while (LoopMain(User,1,TrHs)) begin
	testf = true;
    if (nonblank(tocc)) then begin
      if (User.Code>tocc) then begin
        TrHs = false;
      end;
    end;
	if (User.Closed==0) then begin
		testf = false;
	end;
	if (testf) then begin
		if (TrHs) then begin
		  if (RepSpec.flags[2]==1) then begin
			BeginCurncyTotals(curcnt);
		  end;
		  GetAcc2StartBalance(User.PersAcc,User.PersObjx,RepSpec.sStartDate,0,0,StartBal,"",RepSpec.flags[2]);
		  StartBal = -StartBal; 
		  TotStartBal = TotStartBal + StartBal;
		  PersListTrans(acur,av1,curcnt,RepSpec,User,StartBal);
		  TotCustBal = TotCustBal + StartBal;
		  if (RepSpec.flags[2]==1) then begin
			PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,6,true,RepSpec.PocketPC);
		  end;
		end;
	end;
  end;
/* why was this removed ??? */
/* why is it needed here, people want to see total for report regardless currency, it is always in base 1 anyway*/
//  if (RepSpec.flags[2]==0) then begin
  if (true) then begin
    Gray_Divider(0,1);
    v = TotCustBal - TotStartBal;
    StartFormat(15);
    OutString(6,0,USetStr(2429),false);
    OutVal(3,0,TotStartBal,M4Val,true);
    OutVal(4,0,v,M4Val,true);
    OutVal(450,0,TotCustBal,M4Val,true);
    EndFormat;
  end else begin
    Gray_Divider(0,1);
  end;

  EndJob;
L99:;
  RETURN;
END;
