remote procedure VIVc_PastePRCode(var record VIVc,Integer);
external function Boolean ValidInternationalCreditorReference(string);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
remote function Boolean VIVc_CalculateRate(var record VIVc,Integer);
remote procedure CalcCashDiscount(var record VIVc);
remote procedure VIVc_PasteTaxTemplate(var record VIVc,Integer);
external function Integer TestAcceptanceStatus(Integer);
external function val CalculateVINettVal(record VIVc,Boolean);
external function Boolean IsLetter(string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean IsCapitalLetter(string);
external function Integer GetVATLaw();
external procedure FindOTforAcc(string,var string);
external procedure GetVAT2Code(string,var val,var val);
external procedure VISumup(record VIVc,var val);
remote procedure VIVc_PastePrepayAmount(var record VIVc,Integer);
remote procedure VIVc_PastePrepayNr(var record VIVc,Integer);
remote procedure VIVc_PasteACShort(var record VIVc,Integer,Boolean);
remote procedure VIVc_PastePayVal(var record VIVc);
external function Integer GetVATLaw();
external function Boolean check_refNor(string);
external function Boolean check_ref(string);
remote procedure VIVc_PasteVEFactoring(var record VIVc,Integer);
remote procedure VIVc_PastePayDeal(var record VIVc);
remote procedure VIGetRate(var record VIVc);
remote procedure ChangeVISerialNr(Integer,record VIVc);
external procedure GetSalesGroup(string,var string);
remote procedure VIVc_PasteTransDate(var record VIVc);
remote procedure VIVc_PasteInvDate(var record VIVc);
remote procedure VIDDefault(Integer,string,var record VIVc);
remote procedure VICalcVals(var record VIVc);
external function Boolean AllowCurChange(string,Boolean);
remote function Boolean VIVc_PasteAccNumber(var record VIVc,string,Boolean,Integer);
remote function Boolean VIVc_PasteBarCode(var record VIVc,Integer,var string);
remote function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string);
remote procedure AutoObj(var string);
external function string 20 FindWithHoldAcc(string,string);
external function Boolean IsDigit(string);
external function Boolean IsCapitalLetter(string);
external function Boolean UserCanChangePendingRecord(Integer);

function Boolean VIDClassFrRateEFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    if (HasLocalization("UKR")==false) then begin
      VIr.VATFrRate = VIr.FrRate;
      PutWindowRecord(wn,VIr);
    end;
    res = true;
  end;
  VIDClassFrRateEFAfter = res;
  return;
end;

function Boolean VIDClassToRateB1EFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    if (HasLocalization("UKR")==false) then begin
      VIr.VATToRateB1 = VIr.ToRateB1;
      PutWindowRecord(wn,VIr);
    end;
    res = true;
  end;
  VIDClassToRateB1EFAfter = res;
  return;
end;

function Boolean VIDClassToRateB2EFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    if (HasLocalization("UKR")==false) then begin
      VIr.VATToRateB2 = VIr.ToRateB2;
      PutWindowRecord(wn,VIr);
    end;
    res = true;
  end;
  VIDClassToRateB2EFAfter = res;
  return;
end;

function Boolean VIDClassBaseRate1EFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    if (HasLocalization("UKR")==false) then begin
      VIr.VATBaseRate1 = VIr.BaseRate1;
      PutWindowRecord(wn,VIr);
    end;
    res = true;
  end;
  VIDClassBaseRate1EFAfter = res;
  return;
end;

function Boolean VIDClassBaseRate2EFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    if (HasLocalization("UKR")==false) then begin
      VIr.VATBaseRate2 = VIr.BaseRate2;
      PutWindowRecord(wn,VIr);
    end;
    res = true;
  end;
  VIDClassBaseRate2EFAfter = res;
  return;
end;

global
function Boolean ValidSuppInvNo_Argentina(string InvoiceNr)
begin
  Boolean res;
  string 1 c;
  Integer i;
  
  res = true;
  if (IsCapitalLetter(Left(InvoiceNr,1))==false) then begin
    res = false;
    goto LValidSuppInvNo_Argentina;
  end;
  for (i=2;i<=5;i=i+1) begin
    c = Mid(InvoiceNr,i,1);
    if (IsDigit(c)==false) then begin
      MessageBox(20858,"");
      goto LValidSuppInvNo_Argentina;
    end;
  end;
  for (i=7;i<15;i=i+1) begin
    c = Mid(InvoiceNr,i,1);
    if (IsDigit(c)==false) then begin
      MessageBox(20858,"");
      goto LValidSuppInvNo_Argentina;
    end;
  end;
LValidSuppInvNo_Argentina:;  
  ValidSuppInvNo_Argentina = res;
  return;
end;        

global
procedure VIOpenPrepExists(string vecode)
BEGIN
  record OPPVc OPPr;
  
  OPPr.VECode = vecode;
  if (ReadFirstKey("VECode",OPPr,1,true)) then begin
    MessageBox(2025,"");
  end;
  RETURN;
END;

function Boolean VIDClassInvDateEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    VIVc_PasteInvDate(VIr);    
    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassInvDateEFAfter = res;
  return;
end;

function Boolean VIDClassTransDateEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    VIVc_PasteTransDate(VIr);    
    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassTransDateEFAfter = res;
  return;
end;

function Boolean VIDClassSalesManEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  string 255 tstr;
  Boolean res;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    GetSalesGroup(VIr.SalesMan,tstr);
    VIr.SalesGroup = tstr;
    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassSalesManEFAfter = res;
  return;
end;

function Boolean VIDClassLangCodeEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    ChangeVISerialNr(WindowState(wn),VIr);
    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassLangCodeEFAfter = res;
  return;
end;

function Boolean VIDClassCurncyCodeEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    VIGetRate(VIr);
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,true));
    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassCurncyCodeEFAfter = res;
  return;
end;

function Boolean VIDClassPayDealEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    VIVc_PastePayDeal(VIr);
    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassPayDealEFAfter = res;
  return;
end;

function Boolean VIDClassCredInvEFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;
  record VIVc orgVIr;
  Boolean res;
  val t;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    if (VIr.CredInv>0) then begin
      orgVIr.SerNr = VIr.CredInv;
      if (ReadFirstMain(orgVIr,1,true)) then begin
        VIr.POSerNr = orgVIr.POSerNr;
        VIr.FrRate = orgVIr.FrRate;
        VIr.ToRateB1 = orgVIr.ToRateB1;
        VIr.ToRateB2 = orgVIr.ToRateB2;
        VIr.BaseRate1 = orgVIr.BaseRate1;
        VIr.BaseRate2 = orgVIr.BaseRate2;

        VIr.VATFrRate = orgVIr.VATFrRate;
        VIr.VATToRateB1 = orgVIr.VATToRateB1;
        VIr.VATToRateB2 = orgVIr.VATToRateB2;
        VIr.VATBaseRate1 = orgVIr.VATBaseRate1;
        VIr.VATBaseRate2 = orgVIr.VATBaseRate2;
        switch (orgVIr.InvType) begin
          case kInvoiceTypeCashInvoiceReceiptPRT:
            if (nonblank(orgVIr.APAcc)) then begin
              VIr.APAcc = orgVIr.APAcc;
            end;
          case kInvoiceTypeCash:
            if (nonblank(orgVIr.APAcc)) then begin
              VIr.APAcc = orgVIr.APAcc;
            end;
        end;
      end;
    end else begin
      switch (VIr.InvType) begin
        case kInvoiceTypeCredit:
          VIr.APAcc = "";
        case kInvoiceTypeCreditSpecialSales:
          VIr.APAcc = "";
      end;
      VIr.POSerNr = -1;
      VIGetRate(VIr);
    end;
    VISumup(VIr,t);
    PutWindowRecord(wn,VIr);
  end;
  VIDClassCredInvEFAfter = res;
  return;
end;

function Boolean VIDClassVEFactoringEFAfter(Integer wn,var record VIVc VIr,Integer rownr,Integer changedf)
begin
  Boolean res;
  
  if (changedf!=0) then begin  
    VIVc_PasteVEFactoring(VIr,rownr);
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassVEFactoringEFAfter = res;
  return;
end;

function Boolean VIDClassPRCodeEFAfter(Integer wn,var record VIVc VIr,Integer rownr,Boolean changedf)
begin
  Boolean res;
  
  if (changedf) then begin  
    VIVc_PastePRCode(VIr,rownr);
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassPRCodeEFAfter = res;
  return;
end;

function Boolean VIDClassVATValEFAfter(Integer wn,var record VIVc VIr,Integer rownr,Boolean changedf)
begin
  Boolean res;
  row VIVc VIrw;
  Integer i,rwcnt;
  val Bal;
  
  if (changedf) then begin 
    if (rownr<0) then begin
      CalcCashDiscount(VIr);
      PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,true));
      PutWindowRecord(wn,VIr);
      res = true;
    end else begin
      VIr.VATVal = BlankVal;
      rwcnt = MatRowCnt(VIr);
      for (i = 0 ;i<rwcnt;i=i+1) begin
        MatRowGet(VIr,i,VIrw);
        switch (VIrw.stp) begin
          case 1:
            if (VIrw.ovst==0) then begin
              VIr.VATVal = VIr.VATVal + VIrw.VATVal;
            end;
        end;
      end;
      CalcCashDiscount(VIr);
      VISumup(VIr,Bal);
      res = true;
    end;
  end;
  VIDClassVATValEFAfter = res;
  return;
end;

function Boolean VIDClassRefStrEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    if (GetVATLaw==vatFinnish) then begin
      if (ValidInternationalCreditorReference(VIr.RefStr)==false) then begin
        if (check_ref(VIr.RefStr)==false) then begin
          MessageBox(1201,"");
        end;
      end;
    end;
/*    Staale says no needed any more*/
    if (GetVATLaw==vatNorwegian) then begin
      if (check_refNor(VIr.RefStr)==false) then begin
        MessageBox(1201,"");
      end;
    end;
    PutWindowRecord(wn,VIr);
  end;
  VIDClassRefStrEFAfter = true;
  return;
end;

function Boolean VIDClassPayValEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    VIVc_PastePayVal(VIr);
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,true));
    PutWindowRecord(wn,VIr);
  end;
  VIDClassPayValEFAfter = true;
  return;
end;

function Boolean VIDClassWithHoldingTaxEFAfter(Integer wn,Boolean changedf)
begin
  record VIVc VIr;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,true));
    PutWindowRecord(wn,VIr);
  end;
  VIDClassWithHoldingTaxEFAfter = true;
  return;
end;
 
function Boolean VIDClassInvoiceNrEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  record VIVc VI2r;
  string 255 c;
  string 255 t1,t2,t3;
  Integer i,l;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    switch (GetVATLaw) begin
      case vatArgentinean:
        if (VIr.ExportFlag==kExportFlagDomestic) then begin
          l = len(VIr.InvoiceNr);
          if (l<15) then begin
            for (i=0;i<l;i=i+1) begin
              c = Mid(VIr.InvoiceNr,i,1);
              if (IsLetter(c)==false) then begin
                goto LVIDClassInvoiceNrEFAfter1;
              end;
              t1 = t1 & c;
            end;
LVIDClassInvoiceNrEFAfter1:;          
            for (i=len(t1)+1;i<l;i=i+1) begin
              c = Mid(VIr.InvoiceNr,i,1);
              if (IsDigit(c)==false) then begin
                goto LVIDClassInvoiceNrEFAfter2;
              end;
              t2 = t2 & c;
            end;
LVIDClassInvoiceNrEFAfter2:;          
            for (i=len(t1)+1+len(t2)+1;i<l;i=i+1) begin
              c = Mid(VIr.InvoiceNr,i,1);
              if (IsDigit(c)==false) then begin
                goto LVIDClassInvoiceNrEFAfter3;
              end;
              t3 = t3 & c;
            end;
            if (len(t2)<4) then begin
               M4PadString(t2,4,"0",true,t2);
            end;
            if (len(t3)<8) then begin
               M4PadString(t3,8,"0",true,t3);
            end;
            if (IsCapitalLetter(t1)==false) then begin
              t1 = chr(asc(t1)-32);            
            end;
            VIr.InvoiceNr = t1 & "-" & t2 & "-" & t3;
LVIDClassInvoiceNrEFAfter3:;          
          end;
          if (ValidSuppInvNo_Argentina(VIr.InvoiceNr)==false) then begin
            MessageBox(20858,"");
          end;
        end;
        VI2r.InvoiceNr = VIr.InvoiceNr;
        VI2r.VECode = VIr.VECode;    
        if (ReadFirstKey("InvoiceNr",VI2r,2,true)) then begin
          if (VI2r.InvType!=kInvoiceTypeCredit and VI2r.InvType!=kInvoiceTypeCreditSpecialSales) then begin
            MessageBox(1547,"");
          end;
        end;
    end;
LVIDClassInvoiceNrEFAfter:;
    PutWindowRecord(wn,VIr);
  end;
  VIDClassInvoiceNrEFAfter = true;
  return;
end;
 
function Boolean VIDClassVECodeEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  string 255 vewarn;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    if (VIVc_PasteVECode(VIr,WindowState(wn),true,true,vewarn)==false) then begin
      Beep;
    end;
    if (nonblank(vewarn)) then begin    
      MessageBox(0,vewarn);
    end;
    PutWindowRecord(wn,VIr);
  end;
  VIDClassVECodeEFAfter = true;
  return;
end;
 
function Boolean VIDClassBarCodeEFAfter(Integer wn,Integer changedf)
begin
  record VIVc VIr;
  string 255 vewarn;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,VIr);
    if (nonblank(VIr.BarCode)) then begin
      if (VIVc_PasteBarCode(VIr,WindowState(wn),vewarn)==false) then begin
        Beep;
      end;
      if (nonblank(vewarn)) then begin    
        MessageBox(0,vewarn);
      end;      
      PutWindowRecord(wn,VIr);
    end else begin
      Beep;
    end;    
  end;
  VIDClassBarCodeEFAfter = true;
  return;
end;


/*need to translate vicalcvalsand apautotrans
procedure GetCLCorspAccount(string corspcode, var string res)
BEGIN
  record CLCorspVc CLCorspr;
  
  res = "";
  CLCorspr.Code = corspcode;
  if (ReadFirstMain(CLCorspr,1,true)) then begin
    res = CLCorspr.AccNumber;
  end;
  RETURN;
END;
 
function Boolean VIDClassCorspCodeEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  record VIVc VIr;
  row VIVc VIrw;
  record CLCorspVc CLCorspr;
  Integer rwcnt;
  string 255 tstr;

  if (changedf) then begin  
    GetWindowRecord(wn,VIr);
    rwcnt = MatRowCnt(VIr);
    if (rownr<rwcnt) then begin
      MatRowGet(VIr,rownr,VIrw);
      GetCLCorspAccount(VIrw.CorspCode,tstr);
      VIrw.AccNumber = tstr;
      MatRowPut(VIr,rownr,VIrw);
      PasteAccNumberintoVI(changedf,VIr,rownr);
    end;  
    PutWindowRecord(wn,VIr);
  end;
  VIDClassCorspCodeEFAfter = true;
  return;
end;
*/

function Boolean VIDClassAccNumberEFAfter(Integer wn,var record VIVc VIr,Integer rownr,Integer changedf)
begin    
  Boolean res;
  
  res = false;
  if (VIVc_PasteAccNumber(VIr,WindEFStr(wn),changedf!=0,rownr)) then begin
    PutWindowRecord(wn,VIr);
  end;
  VIDClassAccNumberEFAfter = res;
  return;
end;

function Boolean VIDClassACShortEFAfter(record VIVc VIr,Integer rownr,Integer changedf)
begin
//  record VIVc VIr;
  Boolean res;
  
  if (changedf!=0) then begin 
//    GetWindowRecord(wn,VIr);
    VIVc_PasteACShort(VIr,rownr,changedf!=0)
//    PutWindowRecord(wn,VIr);
    res = true;
  end;
  VIDClassACShortEFAfter = res;
  return;
end;

function Boolean VIDClassPrepayNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    VIVc_PastePrepayNr(VIr,rownr)
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassPrepayNrEFAfter = res;
  return;
end;

function Boolean VIDClassPrepayAmountEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    VIVc_PastePrepayAmount(VIr,rownr)
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassPrepayAmountEFAfter = res;
  return;
end;

function Boolean VIDClassVATCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;

  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    VIDDefault(rownr,"VATCode",VIr);
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,false));
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassVATCodeEFAfter = res;
  return;
end;

function Boolean VIDClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;
  val ct;

  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    VIVc_PasteTaxTemplate(VIr,rownr);    
    VICalcVals(VIr);
    VISumup(VIr,ct);  
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,false));
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassTaxTemplateCodeEFAfter = res;
  return;
end;

function Boolean VIDClassSumEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  Boolean res;
  val ct;

  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    VICalcVals(VIr);
    VISumup(VIr,ct);  
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,false));
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassSumEFAfter = res;
  return;
end;

procedure AddHierObjects(string objects,var string objstr)
BEGIN
  record ObjVc Objr;
  Integer i;

  objstr = objects;
  for (i=len(objects);i>0;i=i-1) begin
    if (Mid(objects,i,1)==",") then begin 
      goto LENDFOR;
    end;
  end;
LENDFOR:;  
  if (i>0) then begin
    Objr.Code = Right(objects,i);
  end else begin
    Objr.Code = objects;
  end;
  if (ReadFirstMain(Objr,1,true)) then begin
    if (nonblank(Objr.AutoObjects)) then begin
      if (nonblank(objstr)) then begin
        objstr = objstr & ",";
      end;
      objstr = objstr & Objr.AutoObjects;
    end;
  end;
  RETURN;
END;

function Boolean VIDClassObjectsEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  row VIVc VIrw;
  Integer rwcnt;
  Boolean res;
  string 255 objstr;

  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    if (rownr>-1) then begin
      rwcnt = MatRowCnt(VIr);
      if (rownr<rwcnt) then begin
        MatRowGet(VIr,rownr,VIrw);
        AddHierObjects(VIrw.Objects,objstr);
        AutoObj(objstr);
        VIrw.Objects = objstr;
        MatRowPut(VIr,rownr,VIrw);
      end;
    end else begin
      AddHierObjects(VIr.Objects,objstr);
      AutoObj(objstr);
      VIr.Objects = objstr;
    end;
    PutWindowRecord(wn,VIr);
    res = false;
  end;
  VIDClassObjectsEFAfter = res;
  return;
end;

function Boolean VIDClassItemEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record VIVc VIr;
  record CUVc VEr;
  record AccVc ACr;
  record APAccBlock APr;
  row VIVc VIrw;
  record INVc INr;
  Boolean res;

  BlockLoad(APr);
  if (changedf!=0) then begin 
    GetWindowRecord(wn,VIr);
    MatRowGet(VIr,rownr,VIrw);
    if (blank(VIrw.AccNumber)) then begin
      INr.Code = VIrw.Item;
      if (ReadFirstMain(INr,1,true)) then begin 
        if (nonblank(INr.CostAcc)) then begin
          VIrw.AccNumber = INr.CostAcc;
          if (nonblank(VIrw.Objects)) then begin
            VIrw.Objects = VIrw.Objects & "," & INr.Objects;
          end else begin
            VIrw.Objects = INr.Objects;
          end;
        end;
      end;
      VEr.Code = VIr.VECode;
      if (ReadFirstMain(VEr,1,true)) then begin
        if (blank(VEr.VEVATCode)) then begin
          switch (VEr.ExportFlag) begin
            case 0:
              VIrw.VATCode = APr.VATCodeDom;
            case 1:
              VIrw.VATCode = APr.VATCodeEU;
            case 2:
              VIrw.VATCode = APr.VATCodeExp;
          end;
        end else begin
          VIrw.VATCode = VEr.VEVATCode;
        end;
        if (blank(VEr.VETaxTemplateCode)) then begin
          switch (VEr.ExportFlag) begin
            case 0:
              VIrw.VATCode = APr.TaxTemplateCode;
            case 1:
              VIrw.VATCode = APr.TaxTemplateCodeEU;
            case 2:
              VIrw.VATCode = APr.TaxTemplateCodeExp;
          end;
        end else begin
          VIrw.VATCode = VEr.VEVATCode;
        end;
      end;        
      MatRowPut(VIr,rownr,VIrw);
      PutWindowRecord(wn,VIr);
    end;
  end;
  VIDClassItemEFAfter = res;
  return;
end;

function Boolean VIDClassAfterEditField_stp1(Integer wn,var record VIVc VIr,string fieldname,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "AccNumber": res = VIDClassAccNumberEFAfter(wn,VIr,rownr,changed);
    case "ACShort": res = VIDClassACShortEFAfter(VIr,rownr,changed);
    case "VEFactoring": res = VIDClassVEFactoringEFAfter(wn,VIr,rownr,changed);
    case "VATVal": res = VIDClassVATValEFAfter(wn,VIr,rownr,changed!=0);
    case "VATCode": res = VIDClassVATCodeEFAfter(wn,rownr,changed);    
    case "TaxTemplateCode": res = VIDClassTaxTemplateCodeEFAfter(wn,rownr,changed);    
    case "Sum": res = VIDClassSumEFAfter(wn,rownr,changed);
    case "Objects": res = VIDClassObjectsEFAfter(wn,rownr,changed);
    case "Item": res = VIDClassItemEFAfter(wn,rownr,changed);   
    case "PRCode": res = VIDClassPRCodeEFAfter(wn,VIr,rownr,changed!=0);
    otherwise res = false;
  end;   
  VIDClassAfterEditField_stp1 = res;     
  RETURN;
END;

function Boolean VIDClassAfterEditField_Retention(Integer wn,var record VIVc VIr,string fieldname,Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "VATVal": res = VIDClassVATValEFAfter(wn,VIr,rownr,changed!=0);
    case "VATCode": res = VIDClassVATCodeEFAfter(wn,rownr,changed);    
    case "Sum": res = VIDClassSumEFAfter(wn,rownr,changed);
    otherwise res = true;
  end;   
  VIDClassAfterEditField_Retention = res;     
  return;
end;

function Boolean VIDClassAfterEditField_stp6(Integer wn,string fieldname,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PrepayNr": res = VIDClassPrepayNrEFAfter(wn,rownr,changed);
    case "PrepayAmount": res = VIDClassPrepayAmountEFAfter(wn,rownr,changed);
  end;        
  VIDClassAfterEditField_stp6 = res;     
  RETURN;
END;

global
function Boolean VIDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record VIVc VIr;
  row VIVc VIrw;
  val ct;
  val incvatpr;
  val rval;
  val t;

  if (rownr<0) then begin
    switch (fieldname) begin
      case "BarCode": res = VIDClassBarCodeEFAfter(wn,changed);
      case "VECode": res = VIDClassVECodeEFAfter(wn,changed);    
      case "InvDate": res = VIDClassInvDateEFAfter(wn,changed);
      case "TransDate": res = VIDClassTransDateEFAfter(wn,changed);
      case "SalesMan": res = VIDClassSalesManEFAfter(wn,changed);
      case "LangCode": res = VIDClassLangCodeEFAfter(wn,changed);
      case "CurncyCode": res = VIDClassCurncyCodeEFAfter(wn,changed);
      case "PayDeal": res = VIDClassPayDealEFAfter(wn,changed);
      case "CredInv": res = VIDClassCredInvEFAfter(wn,changed!=0);
      case "VEFactoring": 
        GetWindowRecord(wn,VIr);
        res = VIDClassVEFactoringEFAfter(wn,VIr,rownr,changed);
      case "PRCode": 
        GetWindowRecord(wn,VIr);
        res = VIDClassPRCodeEFAfter(wn,VIr,rownr,changed!=0);
      case "RefStr": res = VIDClassRefStrEFAfter(wn,changed);
      case "PayVal": res = VIDClassPayValEFAfter(wn,changed);
      case "WithHoldingTax": res = VIDClassWithHoldingTaxEFAfter(wn,changed!=0);
      case "VATVal": 
        GetWindowRecord(wn,VIr);
        res = VIDClassVATValEFAfter(wn,VIr,-1,changed!=0);
      case "InvoiceNr": res = VIDClassInvoiceNrEFAfter(wn,changed);
      case "Objects": res = VIDClassObjectsEFAfter(wn,-1,changed);
      case "FrRate": res = VIDClassFrRateEFAfter(wn,changed!=0);
      case "BaseRate1": res = VIDClassBaseRate1EFAfter(wn,changed!=0);
      case "BaseRate2": res = VIDClassBaseRate2EFAfter(wn,changed!=0);
      case "ToRateB1": res = VIDClassToRateB1EFAfter(wn,changed!=0);
      case "ToRateB2": res = VIDClassToRateB2EFAfter(wn,changed!=0);
    end;
  end else begin
    GetWindowRecord(wn,VIr);
    MatRowGet(VIr,rownr,VIrw);
    switch (VIrw.stp) begin
      case kInvoiceRowTypeNormal:
        if (changed!=0) then begin
          switch (fieldname) begin
            case "TaxTemplateCode":
            otherwise
              VICalcVals(VIr);//why here ? 
          end;
        end;
        res = VIDClassAfterEditField_stp1(wn,VIr,fieldname,rownr,changed);
      case 6:
        res = VIDClassAfterEditField_stp6(wn,fieldname,rownr,changed);
      case kInvoiceRowTypeRetention:
        res = VIDClassAfterEditField_Retention(wn,VIr,fieldname,rownr,changed);
      case kInvoiceRowTypeWithholdingTax:
        switch (fieldname) begin
          case "Sum": res = VIDClassSumEFAfter(wn,rownr,changed);
        end;
    end;
    if (res!=false) then begin// otherwise when pressing enter on AccNumber we put VIVc in update mode even when nothing changes
      PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,false));
      PutWindowRecord(wn,VIr);
    end;
  end;
  VIDClassAfterEditField = res;
  RETURN;
END;

function Boolean VIAcceptanceStarted(record VIVc VIr)
begin
  Boolean res;

  res = false;
  if (VIr.AcceptanceStatus>=kAcceptanceStatePending) then begin
    res = true;
  end;
  VIAcceptanceStarted = res;
  return;
end;

global
function Boolean VIDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record VIVc VIr;
  Integer err;
 
  res = true;
  GetWindowRecord(wn,VIr);
  err = TestAcceptanceStatus(VIr.AcceptanceStatus);  
  if (err!=0) then begin
    MessageBox(err,"");
    res = false;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    if (VIr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,VIr);
    if (VIr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  VIDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean VIDClassPrelBookButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record VIVc VIr;
  Integer err;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,VIr);
    err = TestAcceptanceStatus(VIr.AcceptanceStatus);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
    end;
    if (VIr.OKFlag!=0) then begin
      res = false;
    end;
    if (VIr.PrelBook!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,VIr);
    err = TestAcceptanceStatus(VIr.AcceptanceStatus);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
    end;
    if (VIr.OKFlag!=0) then begin
      res = false;
    end;
    if (VIr.PrelBook!=0) then begin
      res = false;
    end;
  end;  
  VIDClassPrelBookButtonAction = res;
  RETURN;
END;

global
function Boolean VIDClassAcceptanceStatusButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record VIVc VIr;
   
  res = false;
  if (value==kAcceptanceStateNotRequested) then begin
    GetWindowRecord(wn,VIr);
    if (VIr.AcceptanceStatus==kAcceptanceStateRejected) then begin
      res = EditingAcceptanceRejectedAllowed(kAcceptanceVI,"VIVc",VIr.SerNr,VIr.AcceptanceStatus,VIr.VECode)==0;
    end;
  end;
  VIDClassAcceptanceStatusButtonAction = res;
  RETURN;
END;

global 
function Boolean VIDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record VIVc VIr;
  row VIVc VIrw;
  Boolean res;
  Integer rwcnt;

  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,VIr);
    if (VIAcceptanceStarted(VIr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
    end;
    if (VIr.OKFlag!=0) then begin
      res = false;
    end else begin
      if (rownr<rwcnt) then begin
        MatRowGet(VIr,rownr,VIrw);
        if (VIrw.stp==3) then begin res = false; end;
      end;
    end;
  end;  
  VIDClassDeleteRowTest = res;
  return;
end;

function
Boolean VICheckTBIVInvoiced(record VIVc VIp,Integer rownr)
BEGIN
  row VIVc VIrw;
  Boolean res;
  record TBIVVc TBIVr;
  
  MatRowGet(VIp,rownr,VIrw);
  if ((nonblank(VIrw.PRCode)) and (nonblank(VIrw.Item))) then begin
    TBIVr.PRCode = VIrw.PRCode;
    TBIVr.oVc = 2;
    TBIVr.SerNr = VIp.SerNr;
    TBIVr.Row = rownr;
    TBIVr.ArtCode = VIrw.Item;
    TBIVr.EMCode = "";
//    TBIVr.ChildNr = -1;
    if (ReadFirstMain(TBIVr,6,true)) then begin
      if (TBIVr.Invoice!=-1) then begin
        res = true;
      end;
    end;    
  end;
  VICheckTBIVInvoiced = res;
  RETURN;
END;

global
function Boolean VIDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  record APAccBlock APAccRec;
  Boolean res,umf;
  record VIVc VI2r;
  record VIVc VIr;
  row VIVc VIrw;
  Integer rwcnt,orwcnt;
  record APVc APr;
  record AcceptSetBlock AcceptSet;
  Integer nwn;
 
  res = false;
  
  if (CurrentUser=="SA1") then begin //Edit***************************Sasha2,12:10 01.12.2015 {
    res = true;
    goto LVIDClassActiveEditField;
  end; //Edit***************************Sasha2,12:10 01.12.2015 }
  
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LVIDClassActiveEditField;
    end;
  end;
  GetWindowRecord(wn,VIr);
  if (WindowState(wn)==Rs_update or WindowState(wn)==Rs_normal) then begin
    res = false;
    GetPrevWindowRecord(wn,VI2r);    
    switch (fieldname) begin
      case "LangCode": res = true;
      case "HoldSum": res = true;
      case "InvDate": 
      case "InvoiceNr":
      case "DueDate": ;
      case "RebDate": ;
      case "Comment": ;
      case "RefStr": ;
      case "RcvDate": ;
      case "SerNr": res = true;
      otherwise
        if (VIAcceptanceStarted(VI2r) and UserCanChangePendingRecord(rownr)==false) then begin
          res = false;
          goto LVIDClassActiveEditField;
        end;
    end;
    if (VI2r.PrelBook!=0) then begin
      res = false;
      if (rownr<0) then begin
        switch (fieldname) begin
          case "SerNr": goto LVIDClassActiveEditField;
        end;
      end;
    end;
    if (VI2r.OKFlag!=0) then begin
      res = false;
      if (rownr<0) then begin
        switch (fieldname) begin
          case "LangCode": res = true;
          case "InvoiceNr": ;
            if (UserCanAction("AllowSuppInvNoChangeOKVI",true)==false) then begin 
              goto LVIDClassActiveEditField;
            end;                  
          case "DueDate": ;
          case "RebDate": ;
          case "Comment": ;
          case "RefStr": ;
          case "VATNr": ;
          case "HoldSum":                
            APr.SerNr = VIr.SerNr;
            if (ReadFirstMain(APr,1,true)==false) then begin
               goto LVIDClassActiveEditField;
            end;
          case "PRCode":                       
            APr.SerNr = VIr.SerNr;
            if (ReadFirstMain(APr,1,true)==false) then begin
              goto LVIDClassActiveEditField;
            end else begin
              if (APr.RVal!=VIr.PayVal) then begin
                goto LVIDClassActiveEditField;
              end;
            end;
          case "BankCode":                       
            APr.SerNr = VIr.SerNr;
            if (ReadFirstMain(APr,1,true)==false) then begin
              goto LVIDClassActiveEditField;
            end;
          case "BankAcc":                       
            APr.SerNr = VIr.SerNr;
            if (ReadFirstMain(APr,1,true)==false) then begin
              goto LVIDClassActiveEditField;
            end;
          otherwise
            goto LVIDClassActiveEditField;
        end;
      end else begin
        switch (fieldname) begin
          case "PRCode":
            if (VICheckTBIVInvoiced(VIr,rownr)) then begin goto LVIDClassActiveEditField; end;
          case "Item":
            if (VICheckTBIVInvoiced(VIr,rownr)) then begin goto LVIDClassActiveEditField; end;
          otherwise
            goto LVIDClassActiveEditField;
        end;  
      end;      
    end;    
  end;
  if (rownr<0) then begin
    switch (fieldname) begin
      case "FrRate": 
        if (AllowCurChange(VIr.CurncyCode,false)==false) then begin goto LVIDClassActiveEditField; end;    
      case "ToRateB1": 
        if (AllowCurChange(VIr.CurncyCode,false)==false) then begin goto LVIDClassActiveEditField; end;    
      case "ToRateB2": 
        if (AllowCurChange(VIr.CurncyCode,false)==false) then begin goto LVIDClassActiveEditField; end;    
      case "BaseRate1": 
        if (AllowCurChange(VIr.CurncyCode,true)==false) then begin goto LVIDClassActiveEditField; end;    
      case "BaseRate2": 
        if (AllowCurChange(VIr.CurncyCode,true)==false) then begin goto LVIDClassActiveEditField; end;    
    end;
  end else begin
    switch (fieldname) begin
      case "VATVal":
        BlockLoad(APAccRec);
        if (APAccRec.SetVATValOnVI==0) then begin
          goto LVIDClassActiveEditField;
        end;
    end;      
  end;  
  res = true;
LVIDClassActiveEditField:;  
  VIDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean VIDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record VIVc VIr;
  record VIVc tmpVIr;
  Boolean ratecalculatedf;

  if (rownr>=0) then begin
    GetWindowRecord(wn,VIr); 
    if (VIr.OKFlag==0) then begin
      GetWindowRecord(wn,tmpVIr);    
      ratecalculatedf = VIVc_CalculateRate(tmpVIr,rownr);
    end;
    if (ratecalculatedf) then begin
      VIr.FrRate = tmpVIr.FrRate;
      VIr.ToRateB1 = tmpVIr.ToRateB1;
      VIr.ToRateB2 = tmpVIr.ToRateB2;
      VIr.BaseRate1 = tmpVIr.BaseRate1;
      VIr.BaseRate2 = tmpVIr.BaseRate2;
    end;
    VICalcVals(VIr);
    PutWindowRecord(wn,VIr);    
  end;
  VIDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean VIDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record VIVc VIr;
  Boolean res;

  res = true;
  GetWindowRecord(wn,VIr);    
  if (VIr.OKFlag!=0) then begin
    res = false;
  end;
  if (VIAcceptanceStarted(VIr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
    res = false;
  end;
  VIDClassInsertRowTest = res;
  return;
end;

global 
function Boolean VIDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record VIVc VIr;
  row VIVc VIrw;
  Boolean res;
  
  if (rownr<0) then begin
    goto LVIDClassOverStrikeTest;
  end;
  GetWindowRecord(wn,VIr);
  res = false;
  MatRowGet(VIr,rownr,VIrw);
  if (VIrw.stp==3) then begin
    MessageBox(1051,"");
  end;
LVIDClassOverStrikeTest:;
  VIDClassOverStrikeTest = res;
  RETURN;
END;

function Boolean VIDEnterSpec(var record VIVc VIp,Integer rownr,string fieldname,var string gotofieldname,var Integer gotorownr)
BEGIN
  Boolean res;
  Integer rwcnt;
  record VITBlock VITRec;
  row VIVc VIrw;
  LongInt newf;
  
  res = true;
  if (rownr<0) then begin
    goto LVIDEnterSpec;
  end;
  newf = -1;
  rwcnt = MatRowCnt(VIp);
  if (rownr>=rwcnt) then begin goto LVIDEnterSpec; end;
  BlockLoad(VITRec);  
  MatRowGet(VIp,rownr,VIrw);
//  debcol = FoTo2Fn(wn,m4offset(VIView,Math.h),row,m4offset(VIRowType,Sum),NIL);
//  textcol = FoTo2Fn(wn,m4offset(VIView,Math.h),row,m4offset(VIRowType,Comment),NIL);
  switch (VIrw.stp) begin
    case 1:
      switch (fieldname) begin
        case "AccNumber":
          gotorownr = rownr;
          gotofieldname = "Sum";
          if (VITRec.trSkipCom==0) then begin 
            gotorownr = rownr;
            gotofieldname = "Comment";
          end;
          if (VITRec.trSkipObj==0) then begin
            gotorownr = rownr;
            gotofieldname = "Objects";
          end;
          res = false;
        case "Objects":
          gotorownr = rownr;
          gotofieldname = "Sum";
          if (VITRec.trSkipCom==0) then begin 
            gotorownr = rownr;
            gotofieldname = "Comment";
          end;
          res = false;
        case "Sum":
          if (blank(VIrw.Sum)) then begin
            VIDDefault(rownr,fieldname,VIp);
//            VICalcVals(VIp);//done in VIDDefault
          end;
          res = true;
      end;
  end;
LVIDEnterSpec:;  
//      if (newf!=-1) then
//        if (EFGoto(wn,newf,true)) then res = false;
  VIDEnterSpec = res;
  RETURN;
END;


global
function Boolean VIDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  record VIVc VIr;
  string 255 gotofieldname;
  Integer gotorownr;
  
  res = false;
  if ((WindowState(wn)==2) or (WindowState(wn)==1)) then begin//Rs_update,Rs_insert
    GetWindowRecord(wn,VIr);
    res = VIDEnterSpec(VIr,rownr,fieldname,gotofieldname,gotorownr);
    PutWindowRecord(wn,VIr);
    if (res==false) then begin
      WindowFieldGoto(wn,VIr,gotorownr,gotofieldname,true);
    end;
  end else begin
    res = true;
  end;
  VIDClassOnEnterKey = res;
  RETURN;
END;

procedure VIDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record VIVc VIr;
  row VIVc VIrw;
  Integer rownr;
  string 200 typ;
  string 10 accnr;

  GetWindowRecord(wn,VIr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(VIr,rownr,VIrw);
    FindOTforAcc(VIrw.AccNumber,typ);
  end else begin
    FindOTforAcc(VIr.APAcc,typ);
    if (VIr.WithHoldingTax<>0) then begin
      accnr = FindWithHoldAcc(VIr.APAcc,VIr.Objects);
      FindOTforAcc(accnr,typ);
    end;  
  end;
  if (nonblank(typ)) then begin
    psname="TRObjSClass";
  end else begin    
    psname="ObjSClass";
  end;
  RETURN;
END;

global
function string 40 VIDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Objects": VIDClassSpecPasteNameObjects(wn,psname);
  end;
  VIDClassSpecPasteName = psname;
  return;
end;

global
function Boolean VIDClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  VIDClassExportFlagButtonAction = res;
  RETURN;
END;

global
function Boolean VIDClassAPonTRButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record VIVc VIr;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,VIr);
    if (VIr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,VIr);
    if (VIr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  VIDClassAPonTRButtonAction = res;
  return;
end;

global
function Boolean VIDClassOnOpenWindow(Integer wn)
begin
  record VIVc VIr;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,VIr);    
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,true));
  end;
  VIDClassOnOpenWindow = false;
  return;
end;