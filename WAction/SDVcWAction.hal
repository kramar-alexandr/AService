external function Integer CountObjects(string);
external function Integer TestAcceptanceStatus(Integer);
remote function Integer CancelApprovalRequestAllowed(Integer,string,string,Integer,string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote procedure SDVc_PasteSerialNr(var record SDVc,Integer,var string);
external procedure WarnFutureDate(Boolean,Date);
remote function Integer CreateQualConFromSD(record SDVc,Integer,var record QualConVc,Integer);
external procedure FindOTforAcc(string,var string);
external function Boolean TestForMATVARINS(Integer);
remote procedure SDVc_PastePosCode(var record SDVc,Integer);
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean SDVc_PasteQty(var record SDVc,Integer);
remote function Boolean SDVc_PasteArtCode(var record SDVc,Integer,Integer,var string,var string);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external procedure SDSumUp(var record SDVc);
external procedure GetACShortAccount(string,var string,var string);
external procedure NormalizeObjstr(var string);
remote function Integer SendForAcceptance_SDVc(var record SDVc,var record RcVc);

global
function Boolean SDDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record SDVc SDr;  
  row SDVc SDrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum,sum;
  string 255 recepy,location;

  res = true;
  GetWindowRecord(wn,SDr);
  rwcnt = MatRowCnt(SDr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(SDr,rownr,SDrw);
    recepy = SDrw.Recepy;
    location = SDrw.Location;
    if (blank(location)) then begin   
      location = SDr.Location;
    end;
    SendArtStat(SDrw.ArtCode,location,recepy,t,tproc,unitprdisc,SDr.TransDate,0);
    SetWindowNameArg(wn,SDrw.ArtCode & ":" & location);
  end;
  SDDClassSwitchRow = res;  
  return;
end;

global
function Boolean SDDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    MatRowGet(SDr,rownr,SDrw);
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,"","",false,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);
    MatRowPut(SDr,rownr,SDrw);
    SDSumUp(SDr);    
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassUnitXvalEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    MatRowGet(SDr,rownr,SDrw);
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,"","",false,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);
    MatRowPut(SDr,rownr,SDrw);
    SDSumUp(SDr);    
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassUnitYvalEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    MatRowGet(SDr,rownr,SDrw);
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,"","",false,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);    
    MatRowPut(SDr,rownr,SDrw);
    SDSumUp(SDr);    
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassUnitZvalEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassSerialNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record SDVc SDr;
  Boolean res;
  string 255 inwarn;

  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    SDVc_PasteSerialNr(SDr,rownr,inwarn);
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassSerialNrEFAfter = res;
  RETURN;
END;

function Boolean SDDClassTransDateEFAfter(Integer wn,Integer changed)
BEGIN
  row SDVc SDrw;
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SDr);
    if (DateWarned(SDr.TransDate,"SDVc")) then begin
      MessageBox(1045,"");
    end;
    if (WarnOldRecords(SDr.TransDate,"SDVc",SDr.SerNr)) then begin
      MessageBox(2020,"");
    end;
    WarnFutureDate(true,SDr.TransDate);
    PutWindowRecord(wn,SDr);    
//JJCS
  end;
  SDDClassTransDateEFAfter = res;
  RETURN;
END;

function Boolean SDDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  string 255 inwarning,warning;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SDr);
    if (SDVc_PasteArtCode(SDr,rownr,changed,inwarning,warning)) then begin
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
      PutWindowRecord(wn,SDr);    
      if (SDDClassSwitchRow(wn,rownr)) then begin end;
    end else begin
      Beep;
    end;
  end;
  SDDClassArtCodeEFAfter = res;
  RETURN;
END;

function Boolean SDDClassQtyEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SDr);
    if (SDVc_PasteQty(SDr,rownr)) then begin
      PutWindowRecord(wn,SDr);    
    end else begin
      Beep;
    end;
  end;
  SDDClassQtyEFAfter = res;
  RETURN;
END;

function Boolean SDDClassPosCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SDr);
    SDVc_PastePosCode(SDr,rownr);
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassPosCodeEFAfter = res;
  RETURN;
END;

function Boolean SDVc_PasteACShort(var record SDVc SDr,Integer rownr)
BEGIN
  row SDVc SDrw;
  string 255 tstr,obj;
  Boolean res;
  
  if (rownr>=0) then begin
    MatRowGet(SDr,rownr,SDrw);
    GetACShortAccount(SDrw.ACShort,tstr,obj);
    SDrw.CostAcc = tstr;
    SDrw.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(SDrw.Objects) then begin
        if (obj<>SDrw.Objects) then begin
          obj = obj & "," & SDrw.Objects;
          NormalizeObjstr(obj);
        end;  
	  end;				
      SDrw.Objects = obj;
    end;
    MatRowPut(SDr,rownr,SDrw);
    res = true;
  end else begin
    GetACShortAccount(SDr.ACShort,tstr,obj);
    SDr.CostAcc = tstr;
    SDr.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(SDr.Objects) then begin
        if (obj<>SDr.Objects) then begin
          obj = obj & "," & SDr.Objects;
          NormalizeObjstr(obj);
        end;  
	  end;				
      SDr.Objects = obj;
    end;
    res = true;
    
  end;  
  SDVc_PasteACShort = res;
  RETURN;
END;

function Boolean SDDClassACShortEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SDVc SDr;
  Boolean res;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,SDr);
    res = SDVc_PasteACShort(SDr,rownr);
    PutWindowRecord(wn,SDr);    
  end;
  SDDClassACShortEFAfter = res;
  RETURN;
END;

global
function Boolean SDDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Qty": res = SDDClassQtyEFAfter(wn,rownr,changed);
    case "ArtCode": res = SDDClassArtCodeEFAfter(wn,rownr,changed);
    case "TransDate": res = SDDClassTransDateEFAfter(wn,changed);
    case "SerialNr": res = SDDClassSerialNrEFAfter(wn,rownr,changed!=0);
    case "UnitZval": res = SDDClassUnitZvalEFAfter(wn,fn,rownr,changed);
    case "UnitYval": res = SDDClassUnitYvalEFAfter(wn,fn,rownr,changed);
    case "UnitXval": res = SDDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "PosCode": res = SDDClassPosCodeEFAfter(wn,fn,rownr,changed);
    case "ACShort": res = SDDClassACShortEFAfter(wn,fn,rownr,changed);
  end;
  SDDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean SDDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record SDVc SDr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SDr);    
    SDSumUp(SDr);
    PutWindowRecord(wn,SDr);    
  end;
  res = true;
  SDDClassOnOverStrike = true;
  RETURN;
END;

global
procedure ItemStatusSDDsm()
BEGIN
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  testf = SDDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN
END;

global 
function Boolean SDDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record SDVc SDr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,SDr);    
    if (SDr.OKFlag!=0) then begin res = false; end;
  end;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,SDr);    
    if (SDr.OKFlag!=0) then begin res = false; end;
  end;
  SDDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean SDDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record SDVc SDr;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetWindowRecord(wn,SDr);
    if (SDr.OKFlag!=0) then begin res = false; end;
  end;
  SDDClassInsertRowTest = res;
  RETURN;
END;

global
function Boolean SDDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record SDVc SDr;
  row SDVc SDrw;
  
  res = true;
  
  GetWindowRecord(wn,SDr);
  switch (wnst) begin
    case Rs_insert:
        res = true;
    otherwise
      if (SDr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  switch (fieldname) begin
    case "Comment": res = true;
    case "FIFO": res = false;
    case "FIFORowVal": res = false;
    case "Spec":
      if (HasLocalization("PRT")) then begin
        MatRowGet(SDr,rownr,SDrw);
        if (nonblank(SDrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
  
  if (CurrentUser=="SA1") then begin		//Edit----------------------Dima  21.01.2016
			res = true;
	end;    
  
  SDDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean SDDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record SDVc SDr;
  Integer err;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==Rs_insert) then begin
    GetWindowRecord(wn,SDr);
    if (SDr.OKFlag!=0) then begin
      res = true;
      goto LSDDClassOKFlagButtonAction;
    end;
    err = TestAcceptanceStatus(SDr.AcceptanceStatus);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LSDDClassOKFlagButtonAction;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SDr);
    err = TestAcceptanceStatus(SDr.AcceptanceStatus);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LSDDClassOKFlagButtonAction;
    end;
    if (SDr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      goto LSDDClassOKFlagButtonAction;
    end;  
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SDr);
    err = TestAcceptanceStatus(SDr.AcceptanceStatus);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LSDDClassOKFlagButtonAction;
    end;
  end;  
  if (SDr.OKFlag!=0) then begin
    res = false;
  end;
LSDDClassOKFlagButtonAction:;  
  SDDClassOKFlagButtonAction = res;
  return;
end;

function string 40 SDDClassSpecPasteNameObjects(Integer wn)
BEGIN
  record SDVc SDr;
  row SDVc SDrw;
  Integer rownr;
  string 200 typ;
  string 255 psname,accnr;

  GetWindowRecord(wn,SDr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(SDr,rownr,SDrw);
    accnr = SDrw.CostAcc;
  end;
  if (blank(accnr)) then begin
    accnr = SDr.CostAcc;
  end;
  FindOTforAcc(accnr,typ);
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = "ObjSClass";
  end;
  SDDClassSpecPasteNameObjects = psname;
  RETURN;
END;

procedure SDDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record SDVc SDr;
  Integer rownr;

  GetWindowRecord(wn,SDr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  WindowFieldGoto(wn,SDr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 SDDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects": psname = SDDClassSpecPasteNameObjects(wn);
    case "ArtCode": SDDClassSpecPasteNameArtCode(wn,psname);
  end;
  SDDClassSpecPasteName = psname;
  return;
end;

global
function Boolean SDDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record SDVc SDr;
  row SDVc SDrw;

  switch (fieldname) begin  
    case "Qty":     
      GetWindowRecord(wn,SDr);      
      MatRowGet(SDr,rownr,SDrw);
      if (SDrw.Qty==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  SDDClassBeforeEditField = res;
  return;
end;

global
procedure QualConFromSDDsm()
begin
  Integer wn,nwn;
  Integer rownr,err;
  record SDVc SDr;
  record QualConVc QCr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,true);
    GetWindowRecord(wn,SDr);
    err = CreateQualConFromSD(SDr,rownr,QCr,0);
    if (err==0) then begin
      nwn = OpenWindow("QualConDClass",1,0,"","",QCr);
    end else begin
      MessageBox(err,"");
    end;
  end else begin
    MessageBox(22064,"");
  end;
  return;
end;

global
updating procedure SDSendforAcceptanceSDDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record SDVc SDr;
  Integer ApproverSelection;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,SDr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LSDSendforAcceptanceSDDsm;
    end;
  end;
  SDr.AcceptanceBy = acceptanceby;
  SDr.AcceptanceFYI = acceptancefyi;
  switch (SDr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      MessageBox(22404,"");
      goto LSDSendforAcceptanceSDDsm;
    case kAcceptanceStatePending:
      MessageBox(22400,"");
      goto LSDSendforAcceptanceSDDsm;
    case kAcceptanceStateApproved:
      MessageBox(22400,"");
      goto LSDSendforAcceptanceSDDsm;
    case kAcceptanceStateRejected:
      MessageBox(22400,"");
      goto LSDSendforAcceptanceSDDsm;
  end;
  err = SendForAcceptance_SDVc(SDr,RepSpec);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(SDr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,SDr);
        if (WindowDoOK(wn,0)) then begin
        end;
      otherwise
        MessageBox(err,"");
    end;
  end;
LSDSendforAcceptanceSDDsm:;  
  return;
end;

global
updating procedure SDSendforAcceptanceSDDsm()
begin
  SDSendforAcceptanceSDDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure SDCancelApprovalRequest(Integer wn)
begin
  record SDVc SDr;
  Integer err;

  GetWindowRecord(wn,SDr);
  err = CancelApprovalRequestAllowed(kAcceptanceSD,"SDVc",SDr.SerNr,SDr.AcceptanceStatus,"");
  if (err!=0) then begin
    MessageBox(err,"");
    goto LSDCancelApprovalRequest;
  end;
  SDr.AcceptanceStatus = kAcceptanceStateNotRequested;
  PutWindowRecord(wn,SDr);
  WindowDoOk(wn,0);
LSDCancelApprovalRequest:;
  return;
end;

global
function Boolean SDDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record SDVc SDr;
  row SDVc SDrw;
  record ObjVc Objr;
  Integer nwn,pos;
  
  switch (fieldname) begin
    case "Objects":
      GetWindowRecord(wn,SDr);  
      if (rownr>=0) then begin
        MatRowGet(SDr,rownr,SDrw);
        if (nonblank(SDrw.Objects)) then begin
          ExtractObj(SDrw.Objects,pos,Objr.Code);
          if (ReadFirstMain(Objr,1,true)) then begin
            nwn = OpenWindow("ObjDClass",1,0,"","",Objr); 
            res = true;   
          end;
        end;
      end else begin
        if (nonblank(SDr.Objects)) then begin
          ExtractObj(SDr.Objects,pos,Objr.Code);
          if (ReadFirstMain(Objr,1,true)) then begin
            nwn = OpenWindow("ObjDClass",1,0,"","",Objr); 
            res = true;   
          end;
        end;
      end;
  end;
  SDDClassOpenRecord = res;
  return;
end;

global
procedure SDStatusDsm()
begin
  record RcVc RepSpec;
  record SDVc SDr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,SDr);
  RepSpec.f1 = SDr.SerNr;
  RepSpec.repname = "SDStatusRn";
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;
